# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:13:58+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query
from starlette.requests import Request

from models import (
    AGCOPowerServicesModelsECU,
    AGCOPowerServicesModelsUserStatus,
    APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode,
    APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition,
    APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationContactInformation,
    APIIPagedResponseAuthorizationCodesSharedModelsCategory,
    APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport,
    APIIPagedResponseGlobalResourcesSharedModelsFileDownload,
    APIIPagedResponseGlobalResourcesSharedModelsGlobalImage,
    APIIPagedResponseGlobalResourcesSharedModelsGlobalImageCategory,
    APIIPagedResponseGlobalResourcesSharedModelsLanguage,
    APIIPagedResponseGlobalResourcesSharedModelsStringDefinition,
    APIIPagedResponseGlobalResourcesSharedModelsStringTranslation,
    APIIPagedResponseGlobalResourcesSharedModelsTranslationRequest,
    APIIPagedResponseGlobalResourcesSharedModelsTranslationSet,
    APIIPagedResponseGlobalResourcesSharedModelsTranslationSetAttribute,
    APIIPagedResponseGlobalResourcesSharedModelsTranslationSetSourceString,
    APIIPagedResponseGlobalResourcesSharedModelsTranslationSetString,
    APIIPagedResponseOASSupportSharedModelsTranslationKey,
    APIModelsApiError,
    APIModelsAuthenticatedUser,
    APIModelsCredentials,
    APIModelsLog,
    APIModelsNotification,
    APIModelsPasswordReset,
    APIModelsPasswordResetRequest,
    APIModelsPermission,
    APIModelsRole,
    APIModelsTokenOptions,
    APIModelsUser,
    APIPagedResponseAPIModelsLog,
    APIPagedResponseAPIModelsPermission,
    APIPagedResponseAPIModelsRole,
    APIPagedResponseAPIModelsUser,
    APIPagedResponseAPIModelsUserEffectivePermission,
    APIPagedResponseBuildSystemSharedDTOActivity,
    APIPagedResponseBuildSystemSharedDTOActivityRun,
    APIPagedResponseBuildSystemSharedDTOAgent,
    APIPagedResponseBuildSystemSharedDTOJob,
    APIPagedResponseBuildSystemSharedDTOJobRun,
    APIPagedResponseBuildSystemSharedDTOStep,
    APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition,
    APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute,
    APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion,
    APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission,
    APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute,
    APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease,
    APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition,
    APIPagedResponseDealerDBModelsDealer,
    APIPagedResponseDealerDBModelsDealersPerCountry,
    APIPagedResponseDealerDBModelsLicense,
    APIPagedResponseDealerDBModelsVoucher,
    APIPagedResponseDealerDBModelsVoucherHistory,
    APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription,
    APIPagedResponseUpdateSystemModelsBundle,
    APIPagedResponseUpdateSystemModelsClient,
    APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata,
    APIPagedResponseUpdateSystemModelsPackage,
    APIPagedResponseUpdateSystemModelsPackageStatusSummary,
    APIPagedResponseUpdateSystemModelsPackageType,
    APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle,
    APIPagedResponseUpdateSystemModelsPriorityPackage,
    APIPagedResponseUpdateSystemModelsUpdateGroup,
    APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship,
    APIPagedResponseUpdateSystemModelsUpdateGroupSubscription,
    ApiV2AftermarketServicesEnginesSerialNumberIQACodesGetResponse,
    ApiV2AftermarketServicesEnginesSerialNumberIQACodesPutRequest,
    ApiV2AftermarketServicesEnginesSerialNumberProductionDataGetResponse,
    ApiV2BrandsGetResponse,
    ApiV2ClientsClientIDCachedFilesGetResponse,
    ApiV2ClientsClientIDPackageReportsBatchPutRequest,
    ApiV2ClientsClientIDPackageReportsGetResponse,
    ApiV2ContentDefinitionAttributesBatchPutRequest,
    ApiV2ContentDefinitionsContentDefinitionIDAttributesBatchPostRequest,
    ApiV2ContentSubmissionAttributesBatchPutRequest,
    ApiV2ContentSubmissionsContentSubmissionIDAttributesBatchPostRequest,
    ApiV2ContentSubmissionTypesGetResponse,
    ApiV2ReportingCurrentPackagesInUpdateGroupGetResponse,
    ApiV2RolesIdPermissionsPutRequest,
    ApiV2RolesIdUsersPutRequest,
    ApiV2StringDefinitionsBatchPostRequest,
    ApiV2StringDefinitionsBatchPutRequest,
    ApiV2StringTranslationsBatchPutRequest,
    ApiV2TranslationRequestsIdStringsPutRequest,
    ApiV2TranslationSetAttributesBatchPutRequest,
    ApiV2TranslationSetsIDAttributesBatchPostRequest,
    ApiV2TranslationSetsIDStringsPutRequest,
    ApiV2UpdateGroupSubscriptionsBatchPostRequest,
    ApiV2UpdateGroupSubscriptionsBatchPutRequest,
    ApiV2UsersIdRolesPutRequest,
    AuthorizationCodesSharedModelsAuthorizationCode,
    AuthorizationCodesSharedModelsAuthorizationCodeDefinition,
    AuthorizationCodesSharedModelsAuthorizationContactInformation,
    AuthorizationCodesSharedModelsCategory,
    AuthorizationCodesSharedModelsCodeValidationModel,
    BuildSystemSharedDTOActivity,
    BuildSystemSharedDTOActivityRun,
    BuildSystemSharedDTOActivityRunStatus,
    BuildSystemSharedDTOAgent,
    BuildSystemSharedDTOAgentStatus,
    BuildSystemSharedDTOJob,
    BuildSystemSharedDTOJobRun,
    BuildSystemSharedDTOStep,
    BuildSystemSharedInterfacesIJobRun,
    ContentSubmissionSharedBusinessEntitiesContentDefinition,
    ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute,
    ContentSubmissionSharedBusinessEntitiesContentReleaseVersion,
    ContentSubmissionSharedBusinessEntitiesContentSubmission,
    ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute,
    ContentSubmissionSharedBusinessEntitiesContentSubmissionType,
    ContentSubmissionSharedBusinessEntitiesRelease,
    ContentSubmissionSharedBusinessEntitiesUserContentDefinition,
    DealerDBModelsDealer,
    DealerDBModelsEDTLiteRegistration,
    DealerDBModelsLicense,
    DealerDBModelsLicenseActivation,
    DealerDBModelsLicenseActivationConfirm,
    DealerDBModelsLicenseActivationCreate,
    DealerDBModelsLicenseActivationUpdate,
    DealerDBModelsVoucher,
    Deleted,
    GlobalResourcesSharedModelsFileDownload,
    GlobalResourcesSharedModelsGlobalImage,
    GlobalResourcesSharedModelsGlobalImageCategory,
    GlobalResourcesSharedModelsLanguage,
    GlobalResourcesSharedModelsStringDefinition,
    GlobalResourcesSharedModelsStringTranslation,
    GlobalResourcesSharedModelsTranslationRequest,
    GlobalResourcesSharedModelsTranslationSet,
    GlobalResourcesSharedModelsTranslationSetAttribute,
    GlobalResourcesSharedModelsTranslationSetStatistics,
    OASSupportSharedModelsTranslationKey,
    State6,
    Status4,
    Status6,
    Status8,
    SubscriptionTypeFilter,
    SystemObject,
    Type3,
    UpdateSystemModelsBundle,
    UpdateSystemModelsCheckinResult,
    UpdateSystemModelsClient,
    UpdateSystemModelsClientInfo,
    UpdateSystemModelsPackage,
    UpdateSystemModelsPackageReport,
    UpdateSystemModelsPackageStatusSummary,
    UpdateSystemModelsPackageType,
    UpdateSystemModelsPackageTypeIDtoBundle,
    UpdateSystemModelsPriorityPackage,
    UpdateSystemModelsUpdateGroup,
    UpdateSystemModelsUpdateGroupClientRelationship,
    UpdateSystemModelsUpdateGroupSubscription,
    UpdateSystemModelsUpdateMetricsData,
)

app = MCPProxy(
    contact={'x-twitter': 'AGCOcorp'},
    title='AGCO API',
    version='v1',
    servers=[{'url': 'https://secure.agco-ats.com'}],
)


@app.get(
    '/api/v2/AftermarketServices/Certificates',
    description=""" No Documentation Found. """,
    tags=['user_management'],
)
def aftermarket_services__get_certs():
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/AftermarketServices/ECUs/{serialNumber}',
    description=""" No Documentation Found. """,
    tags=['aftermarket_services_management'],
)
def aftermarket_services__put_e_c_u(
    serial_number: str = Path(..., alias='serialNumber'),
    e_d_t_instance_id: str = Query(..., alias='EDTInstanceId'),
    body: AGCOPowerServicesModelsECU = ...,
):
    """
    Activate or Deactivate an ECU, or Report an ECU as Damaged.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes',
    description=""" No Documentation Found. """,
    tags=['aftermarket_services_management'],
)
def aftermarket_services__get_engine_i_q_a_codes(
    serial_number: str = Path(..., alias='serialNumber'),
    e_d_t_instance_id: str = Query(..., alias='EDTInstanceId'),
):
    """
    Get injector codes given engine.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes',
    description=""" No Documentation Found. """,
    tags=['aftermarket_services_management'],
)
def aftermarket_services__put_i_q_a_codes(
    serial_number: str = Path(..., alias='serialNumber'),
    e_d_t_instance_id: str = Query(..., alias='EDTInstanceId'),
    body: ApiV2AftermarketServicesEnginesSerialNumberIQACodesPutRequest = ...,
):
    """
    Report the IQA codes used by an engine
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AftermarketServices/Engines/{serialNumber}/ProductionData',
    description=""" No Documentation Found. """,
    tags=['aftermarket_services_management'],
)
def aftermarket_services__get_production_data(
    serial_number: str = Path(..., alias='serialNumber'),
    e_d_t_instance_id: str = Query(..., alias='EDTInstanceId'),
):
    """
    Get production calibration data for given engine.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AftermarketServices/Hello',
    description=""" No Documentation Found. """,
    tags=['user_authentication_management', 'client_management'],
)
def aftermarket_services__get_connection_status():
    """
    Check whether there is connectivity to AGCO Power Web Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AftermarketServices/UserStatuses',
    description=""" No Documentation Found. """,
    tags=['user_registration_management', 'voucher_management'],
)
def aftermarket_services__get_user_status(
    voucher_code: str = Query(..., alias='voucherCode'),
    dealer_code: str = Query(..., alias='dealerCode'),
):
    """
    Retrieve the status of an EDT Kit Registration with AGCO Power Web Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/AftermarketServices/UserStatuses',
    description=""" No Documentation Found. """,
    tags=['user_registration_management', 'aftermarket_services_management'],
)
def aftermarket_services__update_user_status(body: AGCOPowerServicesModelsUserStatus):
    """
    Update the status of an EDT Kit Registration with AGCO Power Web Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/AuthenticatedUsers/{UserID}/Tokens',
    description=""" No Documentation Found. """,
    tags=['user_authentication_management'],
)
def authentication__put_manage_tokens(
    user_i_d: int = Path(..., alias='UserID'), body: APIModelsTokenOptions = ...
):
    """
    Manage API tokens.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Authentication',
    description=""" No Documentation Found. """,
    tags=['user_authentication_management', 'user_management'],
)
def authentication__default(body: APIModelsCredentials):
    """
    Authenticate a user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Authentication/IsAlive',
    description=""" No Documentation Found. """,
    tags=['user_authentication_management'],
)
def authentication__is_alive():
    """
    Acknowledges the connection to the API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Authentication/RequestPasswordReset',
    description=""" No Documentation Found. """,
    tags=['user_authentication_management', 'user_management'],
)
def authentication__request_password_reset(body: APIModelsPasswordResetRequest):
    """
    Request a password reset.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Authentication/ResetPasword',
    description=""" No Documentation Found. """,
    tags=['user_authentication_management'],
)
def authentication__reset_pasword(body: APIModelsPasswordReset):
    """
    Reset a password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationCategories',
    description=""" No Documentation Found. """,
    tags=['authorization_categories_management'],
)
def authorization_categories__get(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    user_i_d: Optional[int] = Query(None, alias='userID'),
    definition_i_d: Optional[str] = Query(None, alias='definitionID'),
):
    """
    Get authorization categories.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/AuthorizationCategories',
    description=""" No Documentation Found. """,
    tags=['authorization_categories_management', 'authorization_code_management'],
)
def authorization_categories__post(body: AuthorizationCodesSharedModelsCategory):
    """
    Add an authorization category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationCategories/Users',
    description=""" No Documentation Found. """,
    tags=[
        'authorization_categories_management',
        'user_permissions_management',
        'user_management',
    ],
)
def authorization_categories__get_users(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    user_i_ds: Optional[str] = Query(None, alias='userIDs'),
    category_i_ds: Optional[str] = Query(None, alias='categoryIDs'),
    include_categories: Optional[bool] = Query(None, alias='includeCategories'),
    include_users: Optional[bool] = Query(None, alias='includeUsers'),
    user_search: Optional[str] = Query(None, alias='userSearch'),
):
    """
    Returns a report of access that users have to Authorization Categories.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/AuthorizationCategories/{id}',
    description=""" No Documentation Found. """,
    tags=['authorization_categories_management'],
)
def authorization_categories__delete(id: str):
    """
    Remove an authorization category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/AuthorizationCategories/{id}',
    description=""" No Documentation Found. """,
    tags=['authorization_categories_management', 'authorization_code_management'],
)
def authorization_categories__put(
    id: str, body: AuthorizationCodesSharedModelsCategory = ...
):
    """
    Update an authorization category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/AuthorizationCategories/{id}/Users/{userID}',
    description=""" No Documentation Found. """,
    tags=['authorization_categories_management', 'user_permissions_management'],
)
def authorization_categories__remove_user(
    id: str, user_i_d: int = Path(..., alias='userID')
):
    """
    Deletes a category a user could see.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/AuthorizationCategories/{id}/Users/{userID}',
    description=""" No Documentation Found. """,
    tags=[
        'authorization_categories_management',
        'user_management',
        'user_permissions_management',
    ],
)
def authorization_categories__add_user(
    id: str, user_i_d: int = Path(..., alias='userID')
):
    """
    Add a category that a user can see.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationCodeDefinitions',
    description=""" Additional searches: validationFields[Name]=true and dataFields[Name]=true. These can be used to search for authorization code definitions that have the specified data or validation fields. """,
    tags=['authorization_code_management', 'authorization_categories_management'],
)
def get_auth_code_definitions(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    name: Optional[str] = None,
    created_by_user_i_d: Optional[int] = Query(None, alias='createdByUserID'),
    deleted_by_user_i_d: Optional[int] = Query(None, alias='deletedByUserID'),
    include_deleted: Optional[bool] = Query(None, alias='includeDeleted'),
    category_i_d: Optional[str] = Query(None, alias='categoryID'),
):
    """
    Get authorization code definitions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/AuthorizationCodeDefinitions',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management', 'authorization_categories_management'],
)
def add_authorization_code_definition(
    body: AuthorizationCodesSharedModelsAuthorizationCodeDefinition,
):
    """
    Add an authorization code definition.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/AuthorizationCodeDefinitions/{ID}/Categories/{categoryID}',
    description=""" No Documentation Found. """,
    tags=['authorization_categories_management', 'authorization_code_management'],
)
def authorization_code_definitions__remove_category_from_definition(
    i_d: str = Path(..., alias='ID'), category_i_d: str = Path(..., alias='categoryID')
):
    """
    Deletes the category from the authorization code definition.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/AuthorizationCodeDefinitions/{ID}/Categories/{categoryID}',
    description=""" No Documentation Found. """,
    tags=['authorization_categories_management', 'authorization_code_management'],
)
def authorization_code_definitions__add_category_to_definition(
    i_d: str = Path(..., alias='ID'), category_i_d: str = Path(..., alias='categoryID')
):
    """
    Add a category to an authorizationCodeDefintion.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/AuthorizationCodeDefinitions/{id}',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management', 'authorization_categories_management'],
)
def disable_authorization_code_definition(id: str):
    """
    Disable an authorization code definition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationCodeDefinitions/{id}',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management', 'authorization_categories_management'],
)
def get_api_v2__authorization_code_definitions__id(id: str):
    """
    Get an authorization code definition by its ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/AuthorizationCodeDefinitions/{id}',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management'],
)
def update_authorization_code_definition(
    id: str, body: AuthorizationCodesSharedModelsAuthorizationCodeDefinition = ...
):
    """
    Update an authorization code definition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationCodes',
    description=""" Additional searches: validationParameters[Name]=Value and dataParameters[Name]=Value. These can be used to search for authorization codes that have been generated using specified values for data or validation parameters. """,
    tags=['authorization_code_management', 'authorization_categories_management'],
)
def authorization_codes__get_authorization_codes(
    code: Optional[str] = None,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    definition_i_d: Optional[str] = Query(None, alias='definitionID'),
    created_by_user_i_d: Optional[int] = Query(None, alias='createdByUserID'),
    deleted_by_user_i_d: Optional[int] = Query(None, alias='deletedByUserID'),
    include_deleted: Optional[bool] = Query(None, alias='includeDeleted'),
):
    """
    Get authorization codes.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/AuthorizationCodes',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management', 'user_authentication_management'],
)
def authorization_codes__post_authorization_code(
    body: AuthorizationCodesSharedModelsAuthorizationCode,
):
    """
    Generates an authorization code using the provided definition and parameters.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/AuthorizationCodes/{id}',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management', 'user_authentication_management'],
)
def authorization_codes__delete_authorization_code(id: int):
    """
    Hide an authorization code.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationCodes/{id}',
    description=""" No Documentation Found. """,
    tags=[
        'authorization_code_management',
        'authorization_categories_management',
        'user_authentication_management',
    ],
)
def authorization_codes__get_authorization_code(id: int):
    """
    Get an authorization code by its ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/AuthorizationCodes/{id}',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management', 'user_authentication_management'],
)
def authorization_codes__put_authorization_code(
    id: int, body: AuthorizationCodesSharedModelsAuthorizationCode = ...
):
    """
    Update an authorization code.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationCodes/{id}/ContactInformation',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management', 'contact_information_management'],
)
def authorization_codes__get_contact_information(id: int):
    """
    Get contact information for an authorization code.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationCodes/{id}/Validate',
    description=""" No Documentation Found. """,
    tags=['user_management'],
)
def authorization_codes__validate_authorization_code(id: int):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/AuthorizationContactInformation',
    description=""" No Documentation Found. """,
    tags=['authorization_code_management', 'contact_information_management'],
)
def authorization_contact_information__get(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    authorization_code: Optional[str] = Query(None, alias='authorizationCode'),
    after_date: Optional[datetime] = Query(None, alias='afterDate'),
    before_date: Optional[datetime] = Query(None, alias='beforeDate'),
    dealer_code: Optional[str] = Query(None, alias='dealerCode'),
):
    """
    Get contact information for authorization codes.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/AuthorizationContactInformation',
    description=""" No Documentation Found. """,
    tags=['contact_information_management', 'authorization_code_management'],
)
def authorization_contact_information__post(
    body: AuthorizationCodesSharedModelsAuthorizationContactInformation,
):
    """
    Add contact information for authorization code.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Brands',
    description=""" No Documentation Found. """,
    tags=['client_management', 'dealer_management'],
)
def brands__brands():
    """
    Gets a list of Brands.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Bundles',
    description=""" No Documentation Found. """,
    tags=['bundle_management'],
)
def bundles__get_bundles(
    update_group_i_d: Optional[str] = Query(None, alias='UpdateGroupID'),
    active: Optional[bool] = Query(None, alias='Active'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    bundle_number: Optional[int] = Query(None, alias='BundleNumber'),
):
    """
    Get the list of bundles.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Bundles',
    description=""" No Documentation Found. """,
    tags=['bundle_management', 'update_group_management'],
)
def bundles__post_bundle(body: UpdateSystemModelsBundle):
    """
    Add a Bundle to the Update System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Bundles/{ID}',
    description=""" No Documentation Found. """,
    tags=['bundle_management'],
)
def bundles__delete_bundle(i_d: str = Path(..., alias='ID')):
    """
    Delete a Bundle.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Bundles/{ID}',
    description=""" No Documentation Found. """,
    tags=['bundle_management'],
)
def bundles__get_bundle(i_d: str = Path(..., alias='ID')):
    """
    Get a specific Bundle by ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Bundles/{ID}',
    description=""" No Documentation Found. """,
    tags=['bundle_management', 'update_group_management'],
)
def bundles__put_bundle(
    i_d: str = Path(..., alias='ID'), body: UpdateSystemModelsBundle = ...
):
    """
    Modify a Bundle in the Update System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Clients',
    description=""" No Documentation Found. """,
    tags=[
        'client_management',
        'client_subscription_management',
        'update_group_management',
    ],
)
def clients__get(
    tag: Optional[str] = Query(None, alias='Tag'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a List of Clients in the Update System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Clients/{ClientID}/CachedFiles',
    description=""" No Documentation Found. """,
    tags=['file_management', 'client_management'],
)
def update_system__get_cached_files(
    client_i_d: str = Path(..., alias='ClientID'),
    expired: bool = Query(..., alias='Expired'),
):
    """
    Get a list of Cached Files installed on the client Machine.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Clients/{ClientID}/PackageReports',
    description=""" No Documentation Found. """,
    tags=['package_report_management', 'client_management'],
)
def package_reports__default(client_i_d: str = Path(..., alias='ClientID')):
    """
    Get the package reports for a client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Clients/{ClientID}/PackageReports',
    description=""" No Documentation Found. """,
    tags=['package_report_management'],
)
def put_api_v2__clients___client_i_d__package_reports(
    client_i_d: str = Path(..., alias='ClientID'),
    body: UpdateSystemModelsPackageReport = ...,
):
    """
    Submit a package report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Clients/{ClientID}/PackageReports/Batch',
    description=""" No Documentation Found. """,
    tags=['package_report_management', 'client_management', 'package_management'],
)
def package_reports__batch(
    client_i_d: str = Path(..., alias='ClientID'),
    body: ApiV2ClientsClientIDPackageReportsBatchPutRequest = ...,
):
    """
    Submit a batch of package reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Clients/{ID}',
    description=""" No Documentation Found. """,
    tags=[
        'client_management',
        'client_subscription_management',
        'update_group_management',
    ],
)
def get_api_v2__clients___i_d(i_d: str = Path(..., alias='ID')):
    """
    Get a Client in the Update System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Clients/{ID}',
    description=""" No Documentation Found. """,
    tags=['client_management', 'client_subscription_management'],
)
def clients__put(
    i_d: str = Path(..., alias='ID'), body: UpdateSystemModelsClient = ...
):
    """
    Update a Client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Clients/{ID}/AvailableUpdateGroupSubscriptions',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def clients__get_available_subscriptions(
    i_d: str = Path(..., alias='ID'),
    update_group_i_d: Optional[str] = Query(None, alias='UpdateGroupID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a Client's Available Update Group Subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Clients/{ID}/UpdateGroupSubscriptions',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def clients__get_subscriptions(
    i_d: str = Path(..., alias='ID'),
    update_group_i_d: Optional[str] = Query(None, alias='UpdateGroupID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a Client's Current Update Group Subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/ContentDefinitionAttributes/Batch',
    description=""" No Documentation Found. """,
    tags=[
        'content_definition_management',
        'content_submission_management',
        'user_content_definition_management',
    ],
)
def content_definitions__put_content_definition_attributes(
    body: ApiV2ContentDefinitionAttributesBatchPutRequest,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/ContentDefinitionAttributes/{contentDefinitionAttributeID}',
    description=""" No Documentation Found. """,
    tags=[
        'content_definition_management',
        'content_submission_management',
        'user_content_definition_management',
    ],
)
def content_definitions__delete_content_definition_attribute(
    content_definition_attribute_i_d: int = Path(
        ..., alias='contentDefinitionAttributeID'
    )
):
    """
    Remove an Attribute from a ContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/ContentDefinitionAttributes/{contentDefinitionAttributeID}',
    description=""" No Documentation Found. """,
    tags=['content_definition_management', 'content_submission_management'],
)
def content_definitions__put_content_definition_attribute_async(
    content_definition_attribute_i_d: int = Path(
        ..., alias='contentDefinitionAttributeID'
    ),
    body: ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute = ...,
):
    """
    Update an Attribute for a ContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentDefinitions',
    description=""" Gets a collection of ContentDefinitions. When successful, the response is a PagedResponse of ContentDefinitions.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_definition_management'],
)
def content_definitions__get_content_definitions(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    user_i_d: Optional[int] = Query(None, alias='userID'),
    include_attributes: Optional[str] = Query(None, alias='includeAttributes'),
    name: Optional[str] = None,
    type_i_d: Optional[int] = Query(None, alias='typeID'),
    package_type_i_d: Optional[str] = Query(None, alias='packageTypeID'),
):
    """
    Get ContentDefinitions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/ContentDefinitions',
    description=""" Creates a ContentDefinition.  The body of the POST is the ContentDefinition to create.
            The ContentDefinitionID will be assigned on creation of the Job.  When successful, the response
            is the JobID.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_definition_management', 'content_submission_management'],
)
def content_definitions__post_content_definition(
    body: ContentSubmissionSharedBusinessEntitiesContentDefinition,
):
    """
    Create a ContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/ContentDefinitions/{contentDefinitionID}',
    description=""" Deletes an ContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate
            ApiError is returned. """,
    tags=['content_definition_management'],
)
def content_definitions__delete_content_definition(
    content_definition_i_d: int = Path(..., alias='contentDefinitionID')
):
    """
    Delete a ContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentDefinitions/{contentDefinitionID}',
    description=""" Gets a ContentDefinition by ID. When successful, the response is the requested ContentDefinition.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_definition_management', 'user_content_definition_management'],
)
def content_definitions__get_content_definition(
    content_definition_i_d: int = Path(..., alias='contentDefinitionID'),
    include_attributes: Optional[str] = Query(None, alias='includeAttributes'),
):
    """
    Get a ContentDefinition by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/ContentDefinitions/{contentDefinitionID}',
    description=""" Updates a ContentDefinition.  The body of the PUT is the updated ContentDefinition.  
            When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=[
        'content_definition_management',
        'content_submission_management',
        'user_content_definition_management',
    ],
)
def content_definitions__put_content_definition(
    content_definition_i_d: int = Path(..., alias='contentDefinitionID'),
    body: ContentSubmissionSharedBusinessEntitiesContentDefinition = ...,
):
    """
    Update a ContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentDefinitions/{contentDefinitionID}/Attributes',
    description=""" No Documentation Found. """,
    tags=[
        'content_definition_management',
        'content_submission_management',
        'user_content_definition_management',
    ],
)
def content_definitions__get_content_definition_attributes(
    content_definition_i_d: int = Path(..., alias='contentDefinitionID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    name: Optional[str] = None,
):
    """
    Get Attributes for a ContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/ContentDefinitions/{contentDefinitionID}/Attributes',
    description=""" No Documentation Found. """,
    tags=['content_definition_management', 'content_submission_management'],
)
def content_definitions__post_content_definition_attribute(
    content_definition_i_d: int = Path(..., alias='contentDefinitionID'),
    body: ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute = ...,
):
    """
    Add an Attribute to a ContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/ContentDefinitions/{contentDefinitionID}/Attributes/Batch',
    description=""" No Documentation Found. """,
    tags=['content_definition_management', 'content_submission_management'],
)
def content_definitions__post_content_definition_attributes(
    content_definition_i_d: int = Path(..., alias='contentDefinitionID'),
    body: ApiV2ContentDefinitionsContentDefinitionIDAttributesBatchPostRequest = ...,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentReleases',
    description=""" Gets a collection of ContentReleaseVersion. When successful, the response is a PagedResponse of ContentReleaseVersion.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_release_management', 'content_definition_management'],
)
def content_release__get_content_release_version(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    deleted: Optional[bool] = None,
    release_i_d: Optional[int] = Query(None, alias='releaseID'),
    user_id: Optional[int] = Query(None, alias='userId'),
    content_definition_i_d: Optional[int] = Query(None, alias='contentDefinitionID'),
    version: Optional[int] = None,
):
    """
    Get ContentReleaseVersion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/ContentReleases',
    description=""" Creates a ContentReleaseVersion.  The body of the POST is the ContentReleaseVersion to create.
            The ContentReleaseId will be assigned on creation of the Job.  When successful, the response
            is the contentReleaseId.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_release_management', 'content_submission_management'],
)
def content_release__post_content_release(
    body: ContentSubmissionSharedBusinessEntitiesContentReleaseVersion,
):
    """
    Create a ContentReleaseVersion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/ContentReleases/{ContentReleaseId}',
    description=""" Deletes an ContentReleaseVersion. When successful, the response is empty.  If unsuccessful, an appropriate
            ApiError is returned. """,
    tags=['content_release_management'],
)
def content_release__delete_content_release_versionn(
    content_release_id: int = Path(..., alias='ContentReleaseId')
):
    """
    Delete a ContentReleaseVersion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentReleases/{ContentReleaseId}',
    description=""" Gets a ContentReleaseVersion by ID. When successful, the response is the requested ContentReleaseVersion.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_release_management'],
)
def get_api_v2__content_releases___content_release_id(
    content_release_id: int = Path(..., alias='ContentReleaseId')
):
    """
    Get a Content Release Version by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/ContentReleases/{ContentReleaseId}',
    description=""" Updates a ContentReleaseVersion.  The body of the PUT is the updated ContentReleaseVersion.  
            When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_release_management', 'content_submission_management'],
)
def content_release__put_content_definition(
    content_release_id: int = Path(..., alias='ContentReleaseId'),
    body: ContentSubmissionSharedBusinessEntitiesContentReleaseVersion = ...,
):
    """
    Update a ContentReleaseVersion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/ContentSubmissionAttributes/Batch',
    description=""" No Documentation Found. """,
    tags=['content_submission_management'],
)
def content_submissions__put_content_submission_attributes(
    body: ApiV2ContentSubmissionAttributesBatchPutRequest,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}',
    description=""" No Documentation Found. """,
    tags=['content_submission_management'],
)
def content_submissions__delete_content_submission_attribute(
    content_submission_attribute_i_d: int = Path(
        ..., alias='contentSubmissionAttributeID'
    )
):
    """
    Remove an Attribute from a ContentSubmission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}',
    description=""" No Documentation Found. """,
    tags=['content_submission_management'],
)
def content_submissions__put_content_submission_attribute_async(
    content_submission_attribute_i_d: int = Path(
        ..., alias='contentSubmissionAttributeID'
    ),
    body: ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute = ...,
):
    """
    Update an Attribute for a ContentSubmission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentSubmissionTypes',
    description=""" No Documentation Found. """,
    tags=['content_submission_type_management', 'content_submission_management'],
)
def content_submission_types__get_content_submission_types(
    enabled: Optional[bool] = None,
):
    """
    Returns available Content Submission Types.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/ContentSubmissionTypes',
    description=""" No Documentation Found. """,
    tags=['content_submission_type_management'],
)
def content_submission_types__post_content_submission_type(
    body: ContentSubmissionSharedBusinessEntitiesContentSubmissionType,
):
    """
    Add a Content Submission Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/ContentSubmissionTypes/{id}',
    description=""" No Documentation Found. """,
    tags=['content_submission_type_management', 'content_submission_management'],
)
def content_submission_types__delete_content_submission_type(id: int):
    """
    Remove a Content Submission Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentSubmissionTypes/{id}',
    description=""" No Documentation Found. """,
    tags=['content_submission_type_management', 'content_submission_management'],
)
def content_submission_types__get_content_submission_type(id: int):
    """
    Retrieves a Content Submission Type by its ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/ContentSubmissionTypes/{id}',
    description=""" No Documentation Found. """,
    tags=['content_submission_type_management', 'content_submission_management'],
)
def content_submission_types__put_content_submission_type(
    id: int, body: ContentSubmissionSharedBusinessEntitiesContentSubmissionType = ...
):
    """
    Update a Content Submission Type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentSubmissions',
    description=""" Gets a collection of ContentSubmissions. When successful, the response is a PagedResponse of ContentSubmissions. Additional searches: attributes[Name]=Value. This can be used to search for submissions that have the specified values for attributes. Beginning and ending wildcard (*) supported for value.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_submission_management', 'content_definition_management'],
)
def content_submissions__get_content_submissions(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    user_i_d: Optional[int] = Query(None, alias='userID'),
    content_definition_i_d: Optional[int] = Query(None, alias='contentDefinitionID'),
    include_attributes: Optional[str] = Query(None, alias='includeAttributes'),
    release_i_d: Optional[int] = Query(None, alias='releaseID'),
    type_i_d: Optional[int] = Query(None, alias='typeID'),
    version: Optional[int] = None,
    include_definition: Optional[bool] = Query(None, alias='includeDefinition'),
):
    """
    Get ContentSubmissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/ContentSubmissions',
    description=""" Creates a ContentSubmission.  The body of the POST is the ContentSubmission to create.
            The ContentSubmissionID will be assigned on creation of the Job.  When successful, the response
            is the ContentSubmissionID.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_submission_management'],
)
def content_submissions__post_content_submission(
    body: ContentSubmissionSharedBusinessEntitiesContentSubmission,
):
    """
    Create a ContentSubmission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/ContentSubmissions/{contentSubmissionID}',
    description=""" Deletes an ContentSubmission. When successful, the response is empty.  If unsuccessful, an appropriate
            ApiError is returned. """,
    tags=['content_submission_management'],
)
def content_submissions__delete_content_submission(
    content_submission_i_d: int = Path(..., alias='contentSubmissionID')
):
    """
    Delete a ContentSubmission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentSubmissions/{contentSubmissionID}',
    description=""" Gets a ContentSubmission by ID. When successful, the response is the requested ContentSubmission.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_submission_management'],
)
def content_submissions__get_content_submission(
    content_submission_i_d: int = Path(..., alias='contentSubmissionID'),
    include_attributes: Optional[str] = Query(None, alias='includeAttributes'),
):
    """
    Get a ContentSubmission by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/ContentSubmissions/{contentSubmissionID}',
    description=""" Updates a ContentSubmission.  The body of the PUT is the updated ContentSubmission.  
            When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_submission_management'],
)
def content_submissions__put_content_submission(
    content_submission_i_d: int = Path(..., alias='contentSubmissionID'),
    body: ContentSubmissionSharedBusinessEntitiesContentSubmission = ...,
):
    """
    Update a ContentSubmission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes',
    description=""" No Documentation Found. """,
    tags=['content_submission_management'],
)
def content_submissions__get_content_submission_attributes(
    content_submission_i_d: int = Path(..., alias='contentSubmissionID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    name: Optional[str] = None,
):
    """
    Get Attributes for a ContentSubmission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes',
    description=""" No Documentation Found. """,
    tags=['content_submission_management'],
)
def content_submissions__post_content_submission_attribute(
    content_submission_i_d: int = Path(..., alias='contentSubmissionID'),
    body: ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute = ...,
):
    """
    Add an Attribute to a ContentSubmission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes/Batch',
    description=""" No Documentation Found. """,
    tags=['content_submission_management'],
)
def content_submissions__post_content_submission_attributes(
    content_submission_i_d: int = Path(..., alias='contentSubmissionID'),
    body: ApiV2ContentSubmissionsContentSubmissionIDAttributesBatchPostRequest = ...,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/ContentSubmissions/{contentSubmissionID}/Status',
    description=""" No Documentation Found. """,
    tags=[
        'content_submission_management',
        'activity_management',
        'activity_run_management',
    ],
)
def content_submissions__get_content_submission_status(
    content_submission_i_d: int = Path(..., alias='contentSubmissionID'),
    include_activity_run_details: Optional[bool] = Query(
        None, alias='includeActivityRunDetails'
    ),
):
    """
    Get the status of a ContentSubmission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/DealerByCountry',
    description=""" No Documentation Found. """,
    tags=['dealer_management'],
)
def dealer_by_country__get_countries(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    """
    Get a total count of dealers per country
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Dealers',
    description=""" No Documentation Found. """,
    tags=['dealer_management'],
)
def dealers__get_dealers(
    brand: Optional[str] = Query(None, alias='Brand'),
    shipping_country: Optional[str] = Query(None, alias='ShippingCountry'),
    dealer_name: Optional[str] = Query(None, alias='DealerName'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a list of dealers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Dealers/{DealerCode}',
    description=""" No Documentation Found. """,
    tags=['dealer_management'],
)
def dealers__get_dealerby_dealer_code(dealer_code: str = Path(..., alias='DealerCode')):
    """
    Lookup a dealer using a dealer code.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Files',
    description=""" No Documentation Found. """,
    tags=['file_management'],
)
def files__get_files(
    include_deleted: Optional[bool] = Query(None, alias='includeDeleted'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a paged response of file metadata.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Files',
    description=""" No Documentation Found. """,
    tags=['file_management'],
)
def files__post_file(body: GlobalResourcesSharedModelsFileDownload):
    """
    Create the metadata for a file before uploading. The State of the File should be 'Created'.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Files/{ID}',
    description=""" No Documentation Found. """,
    tags=['file_management'],
)
def files__delete_file(i_d: str = Path(..., alias='ID')):
    """
    Mark a file as 'Removed'. Disables download of the file and hides metadata from GET all method
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Files/{ID}',
    description=""" No Documentation Found. """,
    tags=['file_management', 'global_image_management'],
)
def files__get_file(i_d: str = Path(..., alias='ID')):
    """
    Gets a file's metadata.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Files/{ID}',
    description=""" Update the metadata for a file. Size may not be modified by the client. 
                Set status to 'Available' to publish a file. The file must be uploaded.
                Set status to 'Created' to reset a file's contents and re-upload. 
                A file may only be 'Removed' by the DELETE method. """,
    tags=['file_management'],
)
def files__put_file(
    i_d: str = Path(..., alias='ID'),
    body: GlobalResourcesSharedModelsFileDownload = ...,
):
    """
    Update the metadata for a file. Size may not be modified by the client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Files/{ID}/FileContents',
    description=""" No Documentation Found. """,
    tags=['file_management'],
)
def files__get_file_contents(i_d: str = Path(..., alias='ID')):
    """
    Download the contents of a file. The current State of the File should be 'Available'.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Files/{ID}/FileContents',
    description=""" No Documentation Found. """,
    tags=['file_management', 'content_submission_management'],
)
def files__put_file_contents(i_d: str = Path(..., alias='ID')):
    """
    Upload the contents of a file. The current State of the File should be 'Created'.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/GlobalImageCategories',
    description=""" No Documentation Found. """,
    tags=['file_management'],
)
def global_image_categories__get_files(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    """
    Get a paged response of file metadata.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/GlobalImageCategories',
    description=""" No Documentation Found. """,
    tags=['file_management', 'global_image_management'],
)
def global_image_categories__post_file(
    body: GlobalResourcesSharedModelsGlobalImageCategory,
):
    """
    Create the metadata for a file before uploading. The State should be 'Created'.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/GlobalImageCategories/{ID}',
    description=""" No Documentation Found. """,
    tags=['file_management', 'global_image_management'],
)
def global_image_categories__get_file(i_d: str = Path(..., alias='ID')):
    """
    Gets a file's metadata.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/GlobalImages',
    description=""" No Documentation Found. """,
    tags=['global_image_management'],
)
def global_images__get_global_images(
    search: Optional[str] = None,
    category_id: Optional[str] = Query(None, alias='categoryId'),
    publisher: Optional[str] = None,
    include_deleted: Optional[bool] = Query(None, alias='includeDeleted'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a paged response of GlobalImage.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/GlobalImages',
    description=""" No Documentation Found. """,
    tags=['global_image_management'],
)
def global_images__post_global_image(
    override_publisher_or_date: Optional[bool] = Query(
        None, alias='overridePublisherOrDate'
    ),
    body: GlobalResourcesSharedModelsGlobalImage = ...,
):
    """
    Create the metadata for a GlobalImage before uploading. The State should be 'Created'.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/GlobalImages/{ID}',
    description=""" No Documentation Found. """,
    tags=['file_management', 'content_submission_management'],
)
def global_images__delete_file(i_d: str = Path(..., alias='ID')):
    """
    Mark a file as 'Removed'. Disables download of the image and hides metadata from GET all method
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/GlobalImages/{ID}',
    description=""" No Documentation Found. """,
    tags=['global_image_management'],
)
def global_images__get_global_image(i_d: str = Path(..., alias='ID')):
    """
    Gets a GlobalImage's metadata.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/GlobalImages/{ID}',
    description=""" Update the metadata for an image. Size may not be modified by the client. 
                Set status to 'Available' to publish an image. Both the image and thumbnail must be uploaded.
                Set status to 'Created' to reset an image's contents and re-upload. 
                A file may only be 'Removed' by the DELETE method. """,
    tags=['global_image_management', 'file_management'],
)
def global_images__put_global_image(
    i_d: str = Path(..., alias='ID'),
    override_publisher_or_date: Optional[bool] = Query(
        None, alias='overridePublisherOrDate'
    ),
    body: GlobalResourcesSharedModelsGlobalImage = ...,
):
    """
    Update the metadata for an image.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/GlobalImages/{ID}/ImageContents',
    description=""" No Documentation Found. """,
    tags=['global_image_management', 'file_management'],
)
def global_images__get_global_image_contents(
    i_d: str = Path(..., alias='ID'),
    is_full_image: Optional[bool] = Query(None, alias='isFullImage'),
):
    """
    Download the contents of a GlobalImage. The current State of the GlobalImage should be 'Available'.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/GlobalImages/{ID}/ImageContents',
    description=""" Both the image and thumbnail must be uploaded.
                Set isFullImage = 'True' for Full Image, isFullImage = 'False' for Thumbnail """,
    tags=[
        'global_image_management',
        'content_submission_management',
        'file_management',
    ],
)
def global_images__put_global_image_contents(
    i_d: str = Path(..., alias='ID'),
    is_full_image: Optional[bool] = Query(None, alias='isFullImage'),
):
    """
    Upload the contents of a GlobalImage. The current State of the File for the GlobalImage should be 'Created'.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Languages',
    description=""" No Documentation Found. """,
    tags=[
        'language_management',
        'string_translations_management',
        'translation_management',
    ],
)
def languages__get_languages(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    include_deleted: Optional[bool] = Query(None, alias='includeDeleted'),
):
    """
    Get a list of the languages for which translations are supported. Returns a PagedResponse of Language objects.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Languages',
    description=""" No Documentation Found. """,
    tags=['language_management'],
)
def languages__create_language(body: GlobalResourcesSharedModelsLanguage):
    """
    Add a Language to support for translations. Accepts a Language object. Returns the Id of the created object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Languages/{LocaleID}',
    description=""" No Documentation Found. """,
    tags=['language_management'],
)
def languages__delete_language(locale_i_d: int = Path(..., alias='LocaleID')):
    """
    Remove a Language from those supported for translations. Marks language as deleted.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Languages/{LocaleID}',
    description=""" No Documentation Found. """,
    tags=['language_management'],
)
def languages__get_language(locale_i_d: int = Path(..., alias='LocaleID')):
    """
    Get a language by its id. Returns a Language object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Languages/{LocaleID}',
    description=""" No Documentation Found. """,
    tags=[
        'language_management',
        'string_translations_management',
        'translation_management',
    ],
)
def languages__update_language(
    locale_i_d: int = Path(..., alias='LocaleID'),
    body: GlobalResourcesSharedModelsLanguage = ...,
):
    """
    Update a language’s description. Accepts a Language object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/LicenseActivations',
    description=""" No Documentation Found. """,
    tags=['license_management'],
)
def license_activations__post(body: DealerDBModelsLicenseActivationCreate):
    """
    Create a license activation.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/LicenseActivations/RegisterEDTLite',
    description=""" No Documentation Found. """,
    tags=['user_registration_management', 'dealer_management'],
)
def license_activations__post_register_e_d_t_lite(
    body: DealerDBModelsEDTLiteRegistration,
):
    """
    Register an EDT Lite with the Server
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/LicenseActivations/{ID}',
    description=""" No Documentation Found. """,
    tags=['license_management', 'user_registration_management'],
)
def license_activations__put(
    i_d: str = Path(..., alias='ID'), body: DealerDBModelsLicenseActivationUpdate = ...
):
    """
    Update a license activiation.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/LicenseActivations/{ID}/Confirm',
    description=""" No Documentation Found. """,
    tags=['license_management', 'client_management'],
)
def license_activations__put_confirm(
    i_d: str = Path(..., alias='ID'), body: DealerDBModelsLicenseActivationConfirm = ...
):
    """
    Confirm that the client has applied the updated license.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Licenses',
    description=""" No Documentation Found. """,
    tags=['license_management', 'voucher_management', 'dealer_management'],
)
def licenses__get(
    voucher_code: Optional[str] = Query(None, alias='VoucherCode'),
    dealer_code: Optional[str] = Query(None, alias='DealerCode'),
    status: Optional[Status4] = Query(None, alias='Status'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Gets a list of licenses with the specified criteria.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Licenses/{ID}',
    description=""" No Documentation Found. """,
    tags=['license_management'],
)
def get_api_v2__licenses___i_d(i_d: str = Path(..., alias='ID')):
    """
    Get a license.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Logs', description=""" No Documentation Found. """, tags=['log_management']
)
def logs__get_logs(limit: Optional[int] = None, offset: Optional[int] = None):
    """
    Get the API System logs, most recent first.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Logs', description=""" No Documentation Found. """, tags=['log_management']
)
def logs__post_log(message: str = Query(..., alias='Message')):
    """
    Add a Log entry
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Logs/{ID}',
    description=""" No Documentation Found. """,
    tags=['log_management'],
)
def logs__get_log(i_d: str = Path(..., alias='ID')):
    """
    Get a log by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Notifications',
    description=""" No Documentation Found. """,
    tags=['notification_management'],
)
def notifications__post_mail(body: APIModelsNotification):
    """
    Sends an email message.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/PackageTypes',
    description=""" No Documentation Found. """,
    tags=['package_type_management'],
)
def package_types__get(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    user_i_d: Optional[int] = Query(None, alias='userID'),
):
    """
    Get all of the Package Types.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/PackageTypes',
    description=""" No Documentation Found. """,
    tags=['package_type_management'],
)
def package_types__post(body: UpdateSystemModelsPackageType):
    """
    Add a Package Type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/PackageTypes/{ID}',
    description=""" No Documentation Found. """,
    tags=['package_type_management'],
)
def package_types__delete(i_d: str = Path(..., alias='ID')):
    """
    Delete a Package Type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/PackageTypes/{ID}',
    description=""" No Documentation Found. """,
    tags=['package_type_management'],
)
def get_api_v2__package_types___i_d(i_d: str = Path(..., alias='ID')):
    """
    Get a specific Package Type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/PackageTypes/{ID}',
    description=""" No Documentation Found. """,
    tags=['package_type_management'],
)
def package_types__put(
    i_d: str = Path(..., alias='ID'), body: UpdateSystemModelsPackageType = ...
):
    """
    Modify a Package Type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/PackageTypes/{id}/Users/{userID}',
    description=""" No Documentation Found. """,
    tags=['package_type_management', 'user_package_visibility_management'],
)
def package_types__remove_package_type_user(
    id: str, user_i_d: int = Path(..., alias='userID')
):
    """
    Deletes a package type a user could see.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/PackageTypes/{id}/Users/{userID}',
    description=""" No Documentation Found. """,
    tags=['package_type_management', 'user_package_visibility_management'],
)
def package_types__add_package_type_user(
    id: str, user_i_d: int = Path(..., alias='userID')
):
    """
    Add a package type that a user can see.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/PackageTypetoBundles',
    description=""" No Documentation Found. """,
    tags=[
        'bundle_management',
        'package_type_management',
        'package_bundle_relationships_management',
    ],
)
def package_typeto_bundles__delete(
    bundle_i_d: str = Query(..., alias='BundleID'),
    package_type_i_d: str = Query(..., alias='PackageTypeID'),
):
    """
    Delete a Package Type to Bundle Relationship.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/PackageTypetoBundles',
    description=""" No Documentation Found. """,
    tags=[
        'package_bundle_relationships_management',
        'package_type_management',
        'bundle_management',
    ],
)
def package_typeto_bundles__get(
    bundle_i_d: Optional[str] = Query(None, alias='BundleID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get all of the Package Type to Bundle Relationships.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/PackageTypetoBundles',
    description=""" No Documentation Found. """,
    tags=[
        'package_bundle_relationships_management',
        'package_type_management',
        'bundle_management',
    ],
)
def package_typeto_bundles__post(body: UpdateSystemModelsPackageTypeIDtoBundle):
    """
    Add a new Package Type ID to Bundle Relationship.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/PackageTypetoBundles',
    description=""" No Documentation Found. """,
    tags=['package_bundle_relationships_management', 'package_type_management'],
)
def package_typeto_bundles__put(body: UpdateSystemModelsPackageTypeIDtoBundle):
    """
    Update a Package Type ID to Bundle Relationship.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Packages',
    description=""" No Documentation Found. """,
    tags=['package_management', 'package_report_management', 'package_type_management'],
)
def packages__get_packages(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    package_type_i_d: Optional[str] = Query(None, alias='PackageTypeID'),
    version: Optional[int] = Query(None, alias='Version'),
    released: Optional[bool] = Query(None, alias='Released'),
):
    """
    List Packages.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Packages',
    description=""" No Documentation Found. """,
    tags=['package_management', 'update_group_management'],
)
def packages__post_package(body: UpdateSystemModelsPackage):
    """
    Add a Package to the Update System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Packages/{ID}',
    description=""" No Documentation Found. """,
    tags=['package_management'],
)
def packages__delete_package(i_d: str = Path(..., alias='ID')):
    """
    Delete a Package.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Packages/{ID}',
    description=""" No Documentation Found. """,
    tags=[
        'package_management',
        'package_report_management',
        'package_type_management',
        'user_package_visibility_management',
        'package_bundle_relationships_management',
    ],
)
def packages__get_package(i_d: str = Path(..., alias='ID')):
    """
    Find a Package.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Packages/{ID}',
    description=""" No Documentation Found. """,
    tags=['package_management', 'update_group_management'],
)
def packages__put_package(
    i_d: str = Path(..., alias='ID'), body: UpdateSystemModelsPackage = ...
):
    """
    Modify a Packge to the Update System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Permissions',
    description=""" No Documentation Found. """,
    tags=['permission_management', 'user_permissions_management'],
)
def permissions__get_permissions(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    name: Optional[str] = None,
):
    """
    List Permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Permissions',
    description=""" No Documentation Found. """,
    tags=['permission_management', 'user_permissions_management', 'roles_management'],
)
def permissions__post_permission(body: APIModelsPermission):
    """
    Adds a Permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Permissions/{id}',
    description=""" No Documentation Found. """,
    tags=[
        'permission_management',
        'authorization_categories_management',
        'user_permissions_management',
    ],
)
def permissions__delete_permission(id: int):
    """
    Deletes a Permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Permissions/{id}',
    description=""" No Documentation Found. """,
    tags=[
        'permission_management',
        'user_permissions_management',
        'authorization_categories_management',
    ],
)
def permissions__get_permission(id: int):
    """
    Gets a Permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Permissions/{id}',
    description=""" No Documentation Found. """,
    tags=['permission_management', 'user_permissions_management', 'roles_management'],
)
def permissions__put_permission(id: int, body: APIModelsPermission = ...):
    """
    Updates a Permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/PriorityPackages',
    description=""" No Documentation Found. """,
    tags=[
        'priority_package_management',
        'package_report_management',
        'client_management',
    ],
)
def priority_packages__get_priority_packages(
    client_i_d: Optional[str] = Query(None, alias='ClientID'),
    status: Optional[Status6] = Query(None, alias='Status'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a list of Priority Packages by Client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/PriorityPackages',
    description=""" No Documentation Found. """,
    tags=['priority_package_management', 'client_management', 'package_management'],
)
def priority_packages__post_priority_packages(body: UpdateSystemModelsPriorityPackage):
    """
    Add a Priority Package for a Client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/PriorityPackages/{ID}',
    description=""" No Documentation Found. """,
    tags=['priority_package_management', 'client_management', 'package_management'],
)
def priority_packages__delete_priority_packages(i_d: str = Path(..., alias='ID')):
    """
    Delete a Priority Package for a Client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/PriorityPackages/{ID}',
    description=""" No Documentation Found. """,
    tags=['priority_package_management', 'client_management', 'package_management'],
)
def priority_packages__get_priority_package(i_d: str = Path(..., alias='ID')):
    """
    Get a Priority Packages for a Client.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Releases',
    description=""" Gets a collection of Release. When successful, the response is a PagedResponse of Release.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_release_management', 'release_management'],
)
def release__get_releases(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    visible: Optional[bool] = None,
    bundle_i_d: Optional[str] = Query(None, alias='bundleID'),
):
    """
    Get Release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Releases',
    description=""" Creates a Release.  The body of the POST is the Release to create.
            The ReleaseId will be assigned on creation of the Job.  When successful, the response
            is the Release Id.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=[
        'content_release_management',
        'content_submission_management',
        'release_management',
    ],
)
def release__post_release(body: ContentSubmissionSharedBusinessEntitiesRelease):
    """
    Create a Release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Releases/{ReleaseId}',
    description=""" Gets a Release by ID. When successful, the response is the requested Release.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_release_management', 'release_management'],
)
def release__get_release(release_id: int = Path(..., alias='ReleaseId')):
    """
    Get a  Release by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Releases/{ReleaseId}/Bundle/{BundleId}',
    description=""" No Documentation Found. """,
    tags=['bundle_management', 'release_management'],
)
def release__delete_release_bundle(
    release_id: int = Path(..., alias='ReleaseId'),
    bundle_id: str = Path(..., alias='BundleId'),
):
    """
    Deletes the association between a release and a bundle.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Releases/{ReleaseId}/Bundle/{BundleId}',
    description=""" No Documentation Found. """,
    tags=[
        'bundle_management',
        'release_management',
        'package_bundle_relationships_management',
    ],
)
def release__post_release_bundle(
    release_id: int = Path(..., alias='ReleaseId'),
    bundle_id: str = Path(..., alias='BundleId'),
):
    """
    Associates the release with a bundle.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Releases/{releaseId}',
    description=""" Updates a Release.  The body of the PUT is the updated Release.  
            When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=[
        'content_release_management',
        'release_management',
        'content_submission_management',
    ],
)
def release__put_content_definition(
    release_id: int = Path(..., alias='releaseId'),
    body: ContentSubmissionSharedBusinessEntitiesRelease = ...,
):
    """
    Update a Release
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/BundleStatusSummary',
    description=""" No Documentation Found. """,
    tags=[
        'bundle_management',
        'package_management',
        'package_report_management',
        'reporting_management',
        'package_bundle_relationships_management',
    ],
)
def reporting__bundle_status_summary(
    bundle_i_d: str = Query(..., alias='BundleID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a summary of all Packages in a Bundle
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/BundlesInUpdateGroup',
    description=""" No Documentation Found. """,
    tags=[
        'update_group_management',
        'bundle_management',
        'client_subscription_management',
    ],
)
def reporting__bundles_in_update_group(
    i_d: str = Query(..., alias='ID'),
    include_inactive: bool = Query(..., alias='IncludeInactive'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a list of bundles for UpdateGroup.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/ClientInfo',
    description=""" No Documentation Found. """,
    tags=['client_management', 'reporting_management'],
)
def reporting__client_info(client_i_d: str = Query(..., alias='ClientID')):
    """
    Get Client Information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/CurrentPackagesInUpdateGroup',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def reporting__current_packages_in_update_group(
    i_d: str = Query(..., alias='ID'),
    subscription_type_filter: Optional[SubscriptionTypeFilter] = Query(
        None, alias='SubscriptionTypeFilter'
    ),
):
    """
    Get the current packages for an update group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/GetClient',
    description=""" No Documentation Found. """,
    tags=[
        'client_management',
        'client_subscription_management',
        'update_group_management',
    ],
)
def reporting__get_client(i_d: str = Query(..., alias='ID')):
    """
    Get a Client in the Update System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/GetSubscriptions',
    description=""" No Documentation Found. """,
    tags=['client_management', 'client_subscription_management'],
)
def reporting__get_subscriptions(
    client_i_d: Optional[str] = Query(None, alias='ClientID'),
    update_group_i_d: Optional[str] = Query(None, alias='UpdateGroupID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a list of current Client Subscriptions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/PackageStatusSummary',
    description=""" No Documentation Found. """,
    tags=['package_report_management', 'reporting_management', 'package_management'],
)
def reporting__package_status_summary(package_i_d: str = Query(..., alias='PackageID')):
    """
    Get a summary report for a Specific Package
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/RegisteredClients',
    description=""" No Documentation Found. """,
    tags=[
        'client_management',
        'client_subscription_management',
        'reporting_management',
    ],
)
def reporting__registered_clients(
    update_group_i_d: Optional[str] = Query(None, alias='UpdateGroupID'),
    client_i_d: Optional[str] = Query(None, alias='ClientID'),
    tag: Optional[str] = Query(None, alias='Tag'),
    report_result: Optional[str] = Query(None, alias='ReportResult'),
    report_result_is_valid: Optional[bool] = Query(None, alias='ReportResultIsValid'),
    report_value: Optional[str] = Query(None, alias='ReportValue'),
    last_check_in_before: Optional[datetime] = Query(None, alias='LastCheckInBefore'),
    last_check_in_after: Optional[datetime] = Query(None, alias='LastCheckInAfter'),
    order_by: Optional[str] = Query(None, alias='OrderBy'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a list of subscribed clients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/UpdateGroups',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def reporting__update_groups(limit: Optional[int] = None, offset: Optional[int] = None):
    """
    Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Reporting/UpdateMetrics',
    description=""" No Documentation Found. """,
    tags=['update_group_management', 'reporting_management'],
)
def reporting__update_metrics(
    update_group_i_d: str = Query(..., alias='UpdateGroupID'),
    bundle_number: Optional[int] = Query(None, alias='bundleNumber'),
):
    """
    Get data for pie charts in UpdateMetrics.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Roles',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'permission_management', 'user_permissions_management'],
)
def roles__get_roles(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    name: Optional[str] = None,
    permission_i_d: Optional[int] = Query(None, alias='permissionID'),
    permission_name: Optional[str] = Query(None, alias='permissionName'),
):
    """
    List Roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Roles',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_permissions_management', 'user_management'],
)
def roles__post_role(body: APIModelsRole):
    """
    Adds a User Role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Roles/{id}',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_management'],
)
def roles__delete_role(id: int):
    """
    Deletes a User Role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Roles/{id}',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_management', 'user_permissions_management'],
)
def roles__get_role(id: int):
    """
    Gets a User Role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Roles/{id}',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_management'],
)
def roles__put_role(id: int, body: APIModelsRole = ...):
    """
    Updates a User Role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Roles/{id}/Permissions',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'permission_management', 'user_permissions_management'],
)
def roles__get_role_permissions(
    id: int,
    name: Optional[str] = None,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get the Permissions for a Role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Roles/{id}/Permissions',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'permission_management', 'user_permissions_management'],
)
def roles__put_role_permissions(id: int, body: ApiV2RolesIdPermissionsPutRequest = ...):
    """
    Manage the Permissions for a Role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Roles/{id}/Users',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_management'],
)
def user_permissions__get_users(
    id: int, limit: Optional[int] = None, offset: Optional[int] = None
):
    """
    Get all user's in a role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Roles/{id}/Users',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_management'],
)
def put_api_v2__roles__id__users(id: int, body: ApiV2RolesIdUsersPutRequest = ...):
    """
    Update a Role's users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/StringDefinitions',
    description=""" No Documentation Found. """,
    tags=['string_definitions_management', 'string_translations_management'],
)
def string_definitions__get_definitions(
    limit: Optional[int] = None,
    modified_after_timestamp: Optional[str] = Query(
        None, alias='modifiedAfterTimestamp'
    ),
    include_translations: Optional[bool] = Query(None, alias='includeTranslations'),
    string_text: Optional[str] = Query(None, alias='stringText'),
    description_text: Optional[str] = Query(None, alias='descriptionText'),
    use_full_text: Optional[bool] = Query(None, alias='useFullText'),
    include_deleted_languages: Optional[bool] = Query(
        None, alias='includeDeletedLanguages'
    ),
    language_ids: Optional[str] = Query(None, alias='languageIds'),
    string_ids: Optional[str] = Query(None, alias='stringIds'),
    matching_translations_only: Optional[bool] = Query(
        None, alias='matchingTranslationsOnly'
    ),
):
    """
    Get a paged response of Global String Definitions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/StringDefinitions/Batch',
    description=""" No Documentation Found. """,
    tags=['string_definitions_management', 'string_translations_management'],
)
def string_definitions__post_definition(body: ApiV2StringDefinitionsBatchPostRequest):
    """
    Create StringDefinition object. The originating translation must be provided. Accepts an array of StringDefinition objects. Returns nothing.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/StringDefinitions/Batch',
    description=""" No Documentation Found. """,
    tags=['string_definitions_management', 'string_translations_management'],
)
def string_definitions__update_definitions(body: ApiV2StringDefinitionsBatchPutRequest):
    """
    Update StringDefinition objects. Accepts an array of StringDefinition objects. This endpoint will add StringDefinitionChange objects to the database. The DescriptionForTranslator may not be modified after a String is submitted for translation.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/StringDefinitions/{ID}',
    description=""" No Documentation Found. """,
    tags=['string_definitions_management', 'string_translations_management'],
)
def string_definitions__get_definition(
    i_d: str = Path(..., alias='ID'),
    include_translations: Optional[bool] = Query(None, alias='includeTranslations'),
    include_deleted_languages: Optional[bool] = Query(
        None, alias='includeDeletedLanguages'
    ),
    language_ids: Optional[str] = Query(None, alias='languageIds'),
):
    """
    Get a paged response of Global String Definitions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/StringTranslations',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'string_definitions_management'],
)
def string_translations__get_translations(
    limit: Optional[int] = None,
    modified_after_timestamp: Optional[str] = Query(
        None, alias='modifiedAfterTimestamp'
    ),
):
    """
    Get a paged response of Global String Translations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/StringTranslations/Batch',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'string_definitions_management'],
)
def string_translations__update_translations(
    body: ApiV2StringTranslationsBatchPutRequest,
):
    """
    Update corrections to string translations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/StringTranslations/{stringId}/{languageId}',
    description=""" No Documentation Found. """,
    tags=[
        'string_translations_management',
        'translation_management',
        'string_definitions_management',
    ],
)
def string_translations__get_translation(
    string_id: str = Path(..., alias='stringId'),
    language_id: int = Path(..., alias='languageId'),
):
    """
    Get a single translation based upon stringId and languageId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/StringTranslations/{stringId}/{languageId}',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'string_definitions_management'],
)
def string_translations__update_translation(
    string_id: str = Path(..., alias='stringId'),
    language_id: int = Path(..., alias='languageId'),
    body: GlobalResourcesSharedModelsStringTranslation = ...,
):
    """
    Update a string value or a state for a string translation.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationKeys',
    tags=[
        'translation_keys_management',
        'string_translations_management',
        'translation_management',
    ],
)
def translation_keys__get(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    key_names: Optional[str] = Query(None, alias='keyNames'),
):
    """
    Get a paged response of TranslationKeys.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/TranslationKeys',
    description=""" No Documentation Found. """,
    tags=[
        'translation_keys_management',
        'translation_management',
        'string_translations_management',
    ],
)
def translation_keys__create_translation_key(
    body: OASSupportSharedModelsTranslationKey,
):
    """
    Create a translationKey object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationKeys/{ID}',
    description=""" No Documentation Found. """,
    tags=[
        'translation_keys_management',
        'string_translations_management',
        'translation_management',
    ],
)
def translation_keys__get_translation_key(i_d: int = Path(..., alias='ID')):
    """
    Get TranslationKey by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/TranslationKeys/{ID}',
    description=""" No Documentation Found. """,
    tags=[
        'string_definitions_management',
        'string_translations_management',
        'translation_keys_management',
        'translation_management',
    ],
)
def translation_keys__update_translation_key(
    i_d: int = Path(..., alias='ID'), body: OASSupportSharedModelsTranslationKey = ...
):
    """
    Update the StringID of the translationKey object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationRequests',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'translation_management'],
)
def translation_requests__get_translation_requests(
    limit: Optional[int] = None, offset: Optional[int] = None
):
    """
    Get all TranslationRequest objects. Returns a PagedResponse of TranslationRequest objects with their language ids and string ids.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/TranslationRequests',
    description=""" No Documentation Found. """,
    tags=['translation_management', 'string_translations_management'],
)
def translation_requests__create_translation_request(
    body: GlobalResourcesSharedModelsTranslationRequest,
):
    """
    Create a translation request. Accepts a TranslationRequest object. Returns the Id of the created object. The state of the TranslationRequest must be ‘NotSubmitted’.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationRequests/{Id}',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'translation_management'],
)
def translation_requests__get_translation_request(id: int = Path(..., alias='Id')):
    """
    Get a TranslationRequest object by id. Returns TranslationRequest object with its language ids and string ids.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/TranslationRequests/{Id}',
    description=""" No Documentation Found. """,
    tags=['translation_management', 'string_translations_management'],
)
def translation_requests__update_translation_request(
    id: int = Path(..., alias='Id'),
    do_resend_request: Optional[bool] = Query(None, alias='doResendRequest'),
    body: GlobalResourcesSharedModelsTranslationRequest = ...,
):
    """
    Update a TranslationRequest object by id. Accepts a TranslationRequest object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/TranslationRequests/{Id}/Strings',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'translation_management'],
)
def translation_requests__update_translation_request_strings(
    id: int = Path(..., alias='Id'),
    body: ApiV2TranslationRequestsIdStringsPutRequest = ...,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/TranslationSetAttributes/Batch',
    description=""" No Documentation Found. """,
    tags=[
        'translation_management',
        'string_translations_management',
        'translation_keys_management',
    ],
)
def translation_sets__update_translation_set_attributes(
    body: ApiV2TranslationSetAttributesBatchPutRequest,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/TranslationSetAttributes/{ID}',
    description=""" No Documentation Found. """,
    tags=['translation_management', 'content_submission_management'],
)
def translation_sets__delete_translation_set_attribute(
    i_d: int = Path(..., alias='ID')
):
    """
    Delete a set of TranslationSetAttribute object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/TranslationSetAttributes/{ID}',
    description=""" No Documentation Found. """,
    tags=[
        'translation_management',
        'string_translations_management',
        'translation_keys_management',
    ],
)
def translation_sets__update_translation_set_attribute(
    i_d: int = Path(..., alias='ID'),
    body: GlobalResourcesSharedModelsTranslationSetAttribute = ...,
):
    """
    Update a TranslationSetAttribute object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationSets',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'translation_management'],
)
def translation_sets__get_translation_sets(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    translation_request_i_d: Optional[int] = Query(None, alias='translationRequestID'),
    state: Optional[State6] = None,
    string_id: Optional[str] = Query(None, alias='stringId'),
    language_id: Optional[int] = Query(None, alias='languageId'),
    include_attributes: Optional[str] = Query(None, alias='includeAttributes'),
):
    """
    Get a PagedResponse of TranslationSet objects. Related TranslationSetStrings are NOT returned
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationSets/{ID}',
    description=""" No Documentation Found. """,
    tags=['translation_management', 'string_translations_management'],
)
def translation_sets__get_translation_set(
    i_d: int = Path(..., alias='ID'),
    include_attributes: Optional[str] = Query(None, alias='includeAttributes'),
):
    """
    Get a TranslationSet object by its id. Related TranslationSetStrings are NOT returned.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/TranslationSets/{ID}',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'translation_management'],
)
def translation_sets__update_translation_set(
    i_d: int = Path(..., alias='ID'),
    body: GlobalResourcesSharedModelsTranslationSet = ...,
):
    """
    Update a Translation Set. Accepts a TranslationSet object. Only the state property may be updated.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationSets/{ID}/Attributes',
    description=""" No Documentation Found. """,
    tags=[
        'translation_management',
        'string_translations_management',
        'translation_keys_management',
    ],
)
def translation_sets__get_translation_set_attributes(
    i_d: int = Path(..., alias='ID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    name: Optional[str] = None,
):
    """
    Get a PagedResponse of TranslationSetAttribute objects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/TranslationSets/{ID}/Attributes',
    description=""" No Documentation Found. """,
    tags=[
        'string_translations_management',
        'translation_management',
        'translation_keys_management',
    ],
)
def translation_sets__post_translation_set_attribute(
    i_d: int = Path(..., alias='ID'),
    body: GlobalResourcesSharedModelsTranslationSetAttribute = ...,
):
    """
    Create a TranslationSetAttribute object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/TranslationSets/{ID}/Attributes/Batch',
    description=""" No Documentation Found. """,
    tags=['translation_management', 'string_translations_management'],
)
def translation_sets__post_translation_set_attributes(
    i_d: int = Path(..., alias='ID'),
    body: ApiV2TranslationSetsIDAttributesBatchPostRequest = ...,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationSets/{ID}/SourceStrings',
    description=""" No Documentation Found. """,
    tags=[
        'string_translations_management',
        'translation_management',
        'string_definitions_management',
    ],
)
def translation_sets__get_source_strings(
    i_d: int = Path(..., alias='ID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Gets the information needed to translate a string in a translation set
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationSets/{ID}/Statistics',
    description=""" No Documentation Found. """,
    tags=[
        'string_definitions_management',
        'string_translations_management',
        'translation_management',
    ],
)
def translation_sets__get_statistics(i_d: int = Path(..., alias='ID')):
    """
    Gets the statistics for translation sets such as the language ids and count of string definitions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/TranslationSets/{ID}/Strings',
    description=""" No Documentation Found. """,
    tags=['string_translations_management', 'translation_management'],
)
def translation_sets__get_translation_set_strings(
    i_d: int = Path(..., alias='ID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a PagedResponse of TranslationSetString objects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/TranslationSets/{ID}/Strings',
    description=""" No Documentation Found. """,
    tags=[
        'string_definitions_management',
        'string_translations_management',
        'translation_management',
    ],
)
def translation_sets__update_translation_set_strings(
    i_d: int = Path(..., alias='ID'),
    body: ApiV2TranslationSetsIDStringsPutRequest = ...,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UpdateGroupClientRelationships',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'client_management'],
)
def update_group_client_relationships__get_subscriptions(
    client_i_d: Optional[str] = Query(None, alias='ClientID'),
    update_group_i_d: Optional[str] = Query(None, alias='UpdateGroupID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    active: Optional[bool] = Query(None, alias='Active'),
):
    """
    Get a list of current Client Subscriptions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/UpdateGroupClientRelationships',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_client_relationships__post_subscription(
    body: UpdateSystemModelsUpdateGroupClientRelationship,
):
    """
    Add a subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/UpdateGroupClientRelationships',
    description=""" No Documentation Found. """,
    tags=[
        'client_subscription_management',
        'update_group_management',
        'client_management',
    ],
)
def set_client_subscription_status_for_update_group(
    client_i_d: str = Query(..., alias='ClientID'),
    update_group_i_d: str = Query(..., alias='UpdateGroupID'),
    active: bool = Query(..., alias='Active'),
):
    """
    DEPRECATED. Set client subscription status for an update group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UpdateGroupClientRelationships/{RelationshipID}',
    description=""" No Documentation Found. """,
    tags=['client_management', 'client_subscription_management'],
)
def update_group_client_relationships__get_subscription(
    relationship_i_d: str = Path(..., alias='RelationshipID')
):
    """
    Get a subscription by RelationshipID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/UpdateGroupClientRelationships/{RelationshipID}',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_client_relationships__put_subscription(
    relationship_i_d: str = Path(..., alias='RelationshipID'),
    body: UpdateSystemModelsUpdateGroupClientRelationship = ...,
):
    """
    Updates a Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UpdateGroupSubscriptions',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_subscriptions__get_update_group_subscriptions(
    update_group_i_d: Optional[str] = Query(None, alias='UpdateGroupID'),
    package_type_i_d: Optional[str] = Query(None, alias='PackageTypeID'),
    client_i_d: Optional[str] = Query(None, alias='ClientID'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get Update Group Subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/UpdateGroupSubscriptions',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_subscriptions__post_update_group_subscription(
    body: UpdateSystemModelsUpdateGroupSubscription,
):
    """
    Add an Update Group Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/UpdateGroupSubscriptions/Batch',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_subscriptions__post_update_group_subscriptions(
    body: ApiV2UpdateGroupSubscriptionsBatchPostRequest,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/UpdateGroupSubscriptions/Batch',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_subscriptions__put_update_group_subscriptions(
    body: ApiV2UpdateGroupSubscriptionsBatchPutRequest,
):
    """
    No Documentation Found.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_subscriptions__delete_update_group_subscription(
    update_group_subscription_i_d: int = Path(..., alias='UpdateGroupSubscriptionID')
):
    """
    Delete an Update Group Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_subscriptions__get_update_group_subscription(
    update_group_subscription_i_d: int = Path(..., alias='UpdateGroupSubscriptionID')
):
    """
    Get an Update Group Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}',
    description=""" No Documentation Found. """,
    tags=['client_subscription_management', 'update_group_management'],
)
def update_group_subscriptions__put_update_group_subscription(
    update_group_subscription_i_d: int = Path(..., alias='UpdateGroupSubscriptionID'),
    body: UpdateSystemModelsUpdateGroupSubscription = ...,
):
    """
    Update an Update Group Subscription
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UpdateGroups',
    description=""" No Documentation Found. """,
    tags=['update_group_management', 'client_subscription_management'],
)
def update_groups__get(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    user_i_d: Optional[int] = Query(None, alias='userID'),
):
    """
    Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/UpdateGroups',
    description=""" No Documentation Found. """,
    tags=['update_group_management', 'client_subscription_management'],
)
def update_groups__post(body: UpdateSystemModelsUpdateGroup):
    """
    Add a new Update Group.  The report field is a string that has a dot based request for a specific piece of submitted data.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/UpdateGroups/{ID}',
    description=""" No Documentation Found. """,
    tags=['update_group_management', 'client_subscription_management'],
)
def update_groups__delete(i_d: str = Path(..., alias='ID')):
    """
    Delete an Update Group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UpdateGroups/{ID}',
    description=""" No Documentation Found. """,
    tags=['update_group_management'],
)
def get_api_v2__update_groups___i_d(i_d: str = Path(..., alias='ID')):
    """
    Get a specific Update Group by ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/UpdateGroups/{ID}',
    description=""" No Documentation Found. """,
    tags=['update_group_management', 'client_subscription_management'],
)
def update_groups__put(
    i_d: str = Path(..., alias='ID'), body: UpdateSystemModelsUpdateGroup = ...
):
    """
    Modify an Update Group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UpdateGroups/{ID}/Bundles',
    description=""" No Documentation Found. """,
    tags=[
        'update_group_management',
        'client_subscription_management',
        'bundle_management',
    ],
)
def update_groups__get_update_group_bundles(
    i_d: str = Path(..., alias='ID'),
    include_inactive: bool = Query(..., alias='IncludeInactive'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a list of bundles for UpdateGroup.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/UpdateGroups/{id}/Users/{userID}',
    description=""" No Documentation Found. """,
    tags=['update_group_management', 'user_management'],
)
def update_groups__remove_update_group_user(
    id: str, user_i_d: int = Path(..., alias='userID')
):
    """
    Deletes an update group a user could see.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/UpdateGroups/{id}/Users/{userID}',
    description=""" No Documentation Found. """,
    tags=[
        'update_group_management',
        'user_management',
        'client_subscription_management',
    ],
)
def update_groups__add_update_group_user(
    id: str, user_i_d: int = Path(..., alias='userID')
):
    """
    Add an updateGroup that a user can see.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UpdateSystem',
    description=""" No Documentation Found. """,
    tags=[
        'client_management',
        'client_subscription_management',
        'update_group_management',
    ],
)
def update_system__get_checkin(
    client_i_d: str = Query(..., alias='ClientID'),
    preview: bool = Query(..., alias='Preview'),
    run_all_inventories: Optional[bool] = Query(None, alias='RunAllInventories'),
):
    """
    Checks the Client ID into the Update System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UserContentDefinitions',
    description=""" Gets a collection of UserContentDefinitions. When successful, the response is a PagedResponse of UserContentDefinitions.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_definition_management', 'user_content_definition_management'],
)
def user_content_definitions__get_user_content_definitions(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    user_i_d: Optional[int] = Query(None, alias='userID'),
    content_definition_i_d: Optional[int] = Query(None, alias='contentDefinitionID'),
):
    """
    Get UserContentDefinitions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/UserContentDefinitions',
    description=""" Creates a UserContentDefinition.  The body of the POST is the UserContentDefinition to create.
            The UserContentDefinitionID will be assigned on creation of the Job.  When successful, the response
            is the UserContentDefinitionID.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['content_definition_management', 'user_content_definition_management'],
)
def user_content_definitions__post_user_content_definition(
    body: ContentSubmissionSharedBusinessEntitiesUserContentDefinition,
):
    """
    Create a UserContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/UserContentDefinitions/{userContentDefinitionID}',
    description=""" Deletes an UserContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate
            ApiError is returned. """,
    tags=['content_definition_management', 'user_content_definition_management'],
)
def user_content_definitions__delete_user_content_definition(
    user_content_definition_i_d: int = Path(..., alias='userContentDefinitionID')
):
    """
    Delete a UserContentDefinition
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/UserContentDefinitions/{userContentDefinitionID}',
    description=""" Gets a UserContentDefinition by ID. When successful, the response is the requested UserContentDefinition.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['user_content_definition_management', 'content_definition_management'],
)
def user_content_definitions__get_user_content_definition(
    user_content_definition_i_d: int = Path(..., alias='userContentDefinitionID')
):
    """
    Get a UserContentDefinition by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Users',
    description=""" No Documentation Found. """,
    tags=[
        'user_management',
        'user_registration_management',
        'user_permissions_management',
    ],
)
def users__get(
    username: Optional[str] = None,
    email: Optional[str] = None,
    name: Optional[str] = None,
    has_role: Optional[str] = Query(None, alias='hasRole'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Users',
    description=""" No Documentation Found. """,
    tags=['user_registration_management', 'user_management'],
)
def users__post(body: APIModelsUser):
    """
    Create a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Users/Current',
    description=""" No Documentation Found. """,
    tags=['user_management', 'user_authentication_management'],
)
def users__get_current_user():
    """
    Gets the current user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Users/Current',
    description=""" No Documentation Found. """,
    tags=[
        'user_management',
        'user_registration_management',
        'user_permissions_management',
    ],
)
def users__put_current_user(body: APIModelsUser):
    """
    Update a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Users/Current/Permissions',
    description=""" No Documentation Found. """,
    tags=[
        'user_permissions_management',
        'authorization_categories_management',
        'roles_management',
    ],
)
def get_api_v2__users__current__permissions(
    permission: Optional[str] = Query(None, alias='Permission'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a user's permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Users/Current/Roles',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_permissions_management', 'user_management'],
)
def user_permissions__get_current_user_roles(
    role: Optional[str] = Query(None, alias='Role'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Gets the current user's roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Users/{id}',
    description=""" No Documentation Found. """,
    tags=['user_management', 'user_registration_management'],
)
def users__delete(id: int):
    """
    Delete a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Users/{id}',
    description=""" No Documentation Found. """,
    tags=[
        'user_management',
        'user_registration_management',
        'user_permissions_management',
    ],
)
def get_api_v2__users__id(id: int):
    """
    Get a specific user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Users/{id}',
    description=""" No Documentation Found. """,
    tags=['user_management', 'user_registration_management'],
)
def users__put(id: int, body: APIModelsUser = ...):
    """
    Update a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Users/{id}/Permissions',
    description=""" No Documentation Found. """,
    tags=[
        'permission_management',
        'user_permissions_management',
        'authorization_categories_management',
    ],
)
def user_permissions__get_permissions(
    id: int,
    permission: Optional[str] = Query(None, alias='Permission'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a user's permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Users/{id}/Roles',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_permissions_management', 'user_management'],
)
def user_permissions__get_roles(
    id: int,
    role: Optional[str] = Query(None, alias='Role'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a user's roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Users/{id}/Roles',
    description=""" No Documentation Found. """,
    tags=['roles_management', 'user_management'],
)
def user_permissions__put(id: int, body: ApiV2UsersIdRolesPutRequest = ...):
    """
    Update a user's roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/VoucherHistory',
    description=""" No Documentation Found. """,
    tags=['voucher_management'],
)
def voucher_history__get_voucher_history(
    voucher_code: Optional[str] = Query(None, alias='VoucherCode'),
    changed_before: Optional[datetime] = Query(None, alias='ChangedBefore'),
    changed_after: Optional[datetime] = Query(None, alias='ChangedAfter'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Gets voucher history data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Vouchers',
    description=""" No Documentation Found. """,
    tags=['voucher_management'],
)
def vouchers__get(
    type: Optional[Type3] = Query(None, alias='Type'),
    dealer_code: Optional[str] = Query(None, alias='DealerCode'),
    license_to: Optional[str] = Query(None, alias='LicenseTo'),
    purpose: Optional[str] = Query(None, alias='Purpose'),
    order_number: Optional[str] = Query(None, alias='OrderNumber'),
    email: Optional[str] = Query(None, alias='Email'),
    modified_by: Optional[str] = Query(None, alias='ModifiedBy'),
    created_after: Optional[datetime] = Query(None, alias='CreatedAfter'),
    created_before: Optional[datetime] = Query(None, alias='CreatedBefore'),
    punched_after: Optional[datetime] = Query(None, alias='PunchedAfter'),
    punched_before: Optional[datetime] = Query(None, alias='PunchedBefore'),
    punched: Optional[bool] = Query(None, alias='Punched'),
    expiration_after: Optional[datetime] = Query(None, alias='ExpirationAfter'),
    expiration_before: Optional[datetime] = Query(None, alias='ExpirationBefore'),
    deleted: Optional[Deleted] = Query(None, alias='Deleted'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Gets a list of vouchers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/Vouchers',
    description=""" No Documentation Found. """,
    tags=['voucher_management'],
)
def vouchers__post(body: DealerDBModelsVoucher):
    """
    Create a voucher
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/Vouchers/{VoucherCode}',
    description=""" No Documentation Found. """,
    tags=['voucher_management'],
)
def vouchers__delete(voucher_code: str = Path(..., alias='VoucherCode')):
    """
    Delete a voucher
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Vouchers/{VoucherCode}',
    description=""" No Documentation Found. """,
    tags=['voucher_management'],
)
def get_api_v2__vouchers___voucher_code(
    voucher_code: str = Path(..., alias='VoucherCode'),
    deleted: Optional[Deleted] = Query(None, alias='Deleted'),
):
    """
    Get a voucher
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/Vouchers/{VoucherCode}',
    description=""" No Documentation Found. """,
    tags=['voucher_management'],
)
def vouchers__put(
    voucher_code: str = Path(..., alias='VoucherCode'),
    body: DealerDBModelsVoucher = ...,
):
    """
    Update a voucher
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/Vouchers/{VoucherCode}/VoucherHistory',
    description=""" No Documentation Found. """,
    tags=['voucher_management'],
)
def vouchers__get_voucher_history(
    voucher_code: str = Path(..., alias='VoucherCode'),
    limit: Optional[int] = None,
    offset: Optional[int] = None,
):
    """
    Get a voucher's history.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/activities',
    description=""" Gets a collection of Activities. When successful, the response is a PagedResponse of Activities.  
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['activity_management'],
)
def activities__get_activities(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    is_include_deleted: Optional[bool] = Query(None, alias='isIncludeDeleted'),
):
    """
    Get Activities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/activities',
    description=""" Creates an Activity.  The body of the POST is the Activity to create.  The ActivityID will be assigned
            on creation of the Activity.  When successful, the response is the ActivityID.  If unsuccessful, an 
            appropriate ApiError is returned. """,
    tags=['activity_management'],
)
def activities__post_activity(body: BuildSystemSharedDTOActivity):
    """
    Create an Activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/activities/{activityID}',
    description=""" Deletes an Activity. When successful, the response is empty.  If unsuccessful, an appropriate
            ApiError is returned. """,
    tags=['activity_management'],
)
def activities__delete_activity(activity_i_d: int = Path(..., alias='activityID')):
    """
    Mark the delete flag for the Activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/activities/{activityID}',
    description=""" Gets an Activity by ID. When successful, the response is the requested Activity.  If unsuccessful,
            an appropriate ApiError is returned. """,
    tags=['activity_management'],
)
def activities__get_activity(
    activity_i_d: int = Path(..., alias='activityID'),
    is_include_deleted: Optional[bool] = Query(None, alias='isIncludeDeleted'),
):
    """
    Get an Activity by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/activities/{activityID}',
    description=""" Updates an Activity.  The body of the PUT is the updated Activity.  When successful, the response is empty.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['activity_management'],
)
def activities__put_activity(
    activity_i_d: int = Path(..., alias='activityID'),
    body: BuildSystemSharedDTOActivity = ...,
):
    """
    Update an Activity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/activityRuns',
    description=""" Gets a collection of ActivityRuns. When successful, the response is a PagedResponse of ActivityRuns.  
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['activity_management', 'activity_run_management'],
)
def activity_runs__get_activity_runs(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    status: Optional[Status8] = None,
):
    """
    Get ActivityRuns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/activityRuns/{activityRunID}',
    description=""" Gets an ActivityRun by ID. When successful, the response is the requested ActivityRun.  If unsuccessful,
            an appropriate ApiError is returned. """,
    tags=['activity_management', 'activity_run_management'],
)
def activity_runs__get_activity_run(
    activity_run_i_d: int = Path(..., alias='activityRunID')
):
    """
    Get an ActivityRun by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/activityRuns/{activityRunID}',
    description=""" Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.
            When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['activity_management', 'activity_run_management'],
)
def activity_runs__put_activity_run(
    activity_run_i_d: int = Path(..., alias='activityRunID'),
    body: BuildSystemSharedDTOActivityRun = ...,
):
    """
    Update an ActivityRun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/activityRuns/{activityRunID}/status',
    description=""" Gets the ActivityRunStatus of an ActivityRun.  When successful, the response is the requested ActivityRunStatus.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['activity_management', 'activity_run_management'],
)
def activity_runs__get_activity_run_status(
    activity_run_i_d: int = Path(..., alias='activityRunID')
):
    """
    Get the ActivityRunStatus of an ActivityRun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/activityRuns/{activityRunID}/status',
    description=""" Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.
            When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['activity_management', 'activity_run_management'],
)
def activity_runs__put_activity_run_status(
    activity_run_i_d: int = Path(..., alias='activityRunID'),
    body: BuildSystemSharedDTOActivityRunStatus = ...,
):
    """
    Update the ActivityRunStatus of an ActivityRun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/agents',
    description=""" Gets a collection of Agents. When successful, the response is a PagedResponse of Agents.  
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['agent_management'],
)
def agents__get_agents(limit: Optional[int] = None, offset: Optional[int] = None):
    """
    Get Agents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/agents',
    description=""" Creates an Agent.  The body of the POST is the Agent to create.  The AgentID will be assigned
            on creation of the Agent.  When successful, the response is the AgentID.  If unsuccessful, an
            appropriate ApiError is returned. """,
    tags=['agent_management'],
)
def agents__post_agent(body: BuildSystemSharedDTOAgent):
    """
    Create an Agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/agents/Current',
    description=""" Gets the Agent associated with the current user. When successful, the response is the requested Agent.  If unsuccessful,
            an appropriate ApiError is returned. """,
    tags=['user_management', 'agent_management'],
)
def agents__get_current_agent_async():
    """
    Get Agent associated with the current user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/agents/Current/ActivityRun',
    description=""" Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun
            assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['activity_run_management', 'agent_management'],
)
def agents__get_current_agent_activity_run():
    """
    Get the ActivityRun of Agent associated with the current user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/agents/{agentID}',
    description=""" Deletes an Agent. When successful, the response is empty.  If unsuccessful, an appropriate
            ApiError is returned. """,
    tags=['agent_management'],
)
def agents__delete_agent(agent_i_d: int = Path(..., alias='agentID')):
    """
    Delete an Agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/agents/{agentID}',
    description=""" Gets an Agent by ID. When successful, the response is the requested Agent.  If unsuccessful,
            an appropriate ApiError is returned. """,
    tags=['agent_management'],
)
def agents__get_agent_async(agent_i_d: int = Path(..., alias='agentID')):
    """
    Get Agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/agents/{agentID}',
    description=""" Updates an Agent.  The body of the PUT is the updated Agent.  When successful, the response is empty.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['agent_management'],
)
def agents__put_agent(
    agent_i_d: int = Path(..., alias='agentID'), body: BuildSystemSharedDTOAgent = ...
):
    """
    Update an Agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/agents/{agentID}/ActivityRun',
    description=""" Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun
            assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['activity_management', 'activity_run_management', 'agent_management'],
)
def agents__get_agent_activity_run(agent_i_d: int = Path(..., alias='agentID')):
    """
    Get an Agent's ActivityRun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/agents/{agentID}/ActivityRun',
    description=""" No Documentation Found. """,
    tags=['activity_run_management', 'agent_management'],
)
def agents__put_agent_activity_run(
    agent_i_d: int = Path(..., alias='agentID'),
    body: BuildSystemSharedDTOActivityRun = ...,
):
    """
    Update the ActivityRun assigned to the Agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/agents/{agentID}/Status',
    description=""" Updates the status of an Agent.The body of the PUT is the updated Agent status.  When successful,
            the response is empty.If unsuccessful, an appropriate ApiError is returned. """,
    tags=['agent_management'],
)
def agents__put_agent_status(
    agent_i_d: int = Path(..., alias='agentID'),
    body: BuildSystemSharedDTOAgentStatus = ...,
):
    """
    Update an Agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/jobRuns',
    description=""" Gets a collection of JobRuns. When successful, the response is a PagedResponse of JobRuns.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['job_run_management', 'activity_run_management'],
)
def job_runs__get_job_runs(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    include_activity_run_details: Optional[bool] = Query(
        None, alias='includeActivityRunDetails'
    ),
):
    """
    Get JobRuns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/jobRuns',
    description=""" Creates a JobRun.  The body of the POST is the JobRun to create.  The JobRunID will be assigned on
            creation of the JobRun.  When successful, the response is the JobRunID.  If unsuccessful, an 
            appropriate ApiError is returned. """,
    tags=['job_run_management', 'job_management'],
)
def job_runs__post_job_run(body: BuildSystemSharedDTOJobRun):
    """
    Create a JobRun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/jobRuns/{jobRunID}',
    description=""" Deletes a JobRun. When successful, the response is empty.  If unsuccessful, an appropriate
            ApiError is returned. """,
    tags=['job_run_management', 'job_management'],
)
def job_runs__delete_job_run(job_run_i_d: int = Path(..., alias='jobRunID')):
    """
    Delete a JobRun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/jobRuns/{jobRunID}',
    description=""" Gets a JobRun by ID. When successful, the response is the requested JobRun.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['job_run_management'],
)
def job_runs__get_job_run(
    job_run_i_d: int = Path(..., alias='jobRunID'),
    include_activity_run_details: Optional[bool] = Query(
        None, alias='includeActivityRunDetails'
    ),
):
    """
    Get a JobRun by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/jobRuns/{jobRunID}',
    description=""" /// 
            Updates a JobRun.  The body of the PUT is the updated JobRun.
            When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned. """,
    tags=['job_run_management', 'job_management'],
)
def job_runs__put_job_run(
    job_run_i_d: int = Path(..., alias='jobRunID'),
    body: BuildSystemSharedDTOJobRun = ...,
):
    """
    Update a JobRun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/jobs',
    description=""" Gets a collection of Jobs. When successful, the response is a PagedResponse of Jobs.
            If unsuccessful, an appropriate ApiError is returned. 
            /// """,
    tags=['job_management'],
)
def jobs__get_jobs(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    is_include_deleted: Optional[bool] = Query(None, alias='isIncludeDeleted'),
):
    """
    Get Jobs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/jobs',
    description=""" Creates a Job.  The body of the POST is the Job to create.  The JobID will be assigned on
            creation of the Job.  When successful, the response is the JobID.  If unsuccessful, an 
            appropriate ApiError is returned. """,
    tags=['job_management'],
)
def jobs__post_job(body: BuildSystemSharedDTOJob):
    """
    Create a Job
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v2/jobs/{jobID}',
    description=""" Deletes a Job. When successful, the response is empty.  If unsuccessful, an appropriate
            ApiError is returned. """,
    tags=['job_management'],
)
def jobs__delete_job(job_i_d: int = Path(..., alias='jobID')):
    """
    Mark the delete flag for the Job
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/jobs/{jobID}',
    description=""" Gets a Job by ID. When successful, the response is the requested Job.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['job_management'],
)
def jobs__get_job(
    job_i_d: int = Path(..., alias='jobID'),
    is_include_deleted: Optional[bool] = Query(None, alias='isIncludeDeleted'),
):
    """
    Get a Job by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/jobs/{jobID}',
    description=""" Updates a Job.  The body of the PUT is the updated Job.  When successful, the response is empty.
            If unsuccessful, an appropriate ApiError is returned. """,
    tags=['job_management'],
)
def jobs__put_job(
    job_i_d: int = Path(..., alias='jobID'), body: BuildSystemSharedDTOJob = ...
):
    """
    Update a Job
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/steps',
    description=""" Gets a collection of Steps. When successful, the response is a PagedResponse of Steps.
            If unsuccessful, an appropriate ApiError is returned.  Steps.Read permission is required. """,
    tags=['step_management'],
)
def steps__get_steps(
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    include_deleted: Optional[bool] = Query(None, alias='includeDeleted'),
):
    """
    Get Steps
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v2/steps',
    description=""" No Documentation Found. """,
    tags=['step_management'],
)
def steps__post_step(body: BuildSystemSharedDTOStep):
    """
    Create a Step
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v2/steps/{stepID}',
    description=""" Gets a Step by ID. When successful, the response is the requested Step.
            If unsuccessful, an appropriate ApiError is returned.  Steps.Read permission is required. """,
    tags=['step_management'],
)
def steps__get_step(
    step_i_d: int = Path(..., alias='stepID'),
    is_include_deleted: Optional[bool] = Query(None, alias='isIncludeDeleted'),
):
    """
    Get a Step by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v2/steps/{stepID}',
    description=""" No Documentation Found. """,
    tags=['step_management'],
)
def steps__put_step(
    step_i_d: int = Path(..., alias='stepID'), body: BuildSystemSharedDTOStep = ...
):
    """
    Update a Step
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
