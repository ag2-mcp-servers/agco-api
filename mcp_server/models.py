# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:13:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class State(Enum):
    Active = 'Active'
    Inactive = 'Inactive'
    Damaged = 'Damaged'


class AGCOPowerServicesModelsECU(BaseModel):
    ActivationCode: Optional[str] = Field(
        None,
        description='The code used to activate the ECU. May not be modified. Returned only on activation.',
    )
    DamagedDescription: Optional[constr(pattern=r'^[a-zA-Z0-9]{0,4096}$')] = Field(
        None, description='A description why the ECU cannot be deactivated.'
    )
    EngineSerialNumber: constr(
        pattern=r'(^[A-Z][0-9]+$)|(^[ABCDEFGHJKLMNPRSTVWX1-9][5CMBL][ED][0-5][0-9][0-7][0-9][0-9][0-9]$)'
    ) = Field(..., description='The serial number of the ECU’s engine')
    ReplacesECUSerialNumber: Optional[constr(pattern=r'^0?\d{23}$')] = Field(
        None,
        description='The serial number of the ECU that this ECU replaces. Required if activating an ECU..',
    )
    SerialNumber: constr(pattern=r'^0?\d{23}$') = Field(
        ..., description='The serial number of the ECU'
    )
    State_1: State = Field(..., alias='State', description='The state of the ECU')


class AGCOPowerServicesModelsProductionData(BaseModel):
    DataType: str = Field(
        ...,
        description="Type of data. Valid types are (but not limited to)\r\n            'PowerCalibration'",
    )
    DataValues: str = Field(..., description='Raw values of the calibration data')


class State1(Enum):
    Active = 'Active'
    Inactive = 'Inactive'
    None_ = 'None'


class AGCOPowerServicesModelsUserStatus(BaseModel):
    DealerCode: str = Field(..., description='The dealer code of the voucher')
    State: Optional[State1] = Field(None, description='The state of the voucher')
    VoucherCode: str = Field(..., description='The voucher code')


class APIModelsApiError(BaseModel):
    DeveloperMessage: Optional[str] = None
    ErrorCode: Optional[int] = None
    MoreInfo: Optional[str] = None
    UserMessage: Optional[str] = None


class APIModelsAuthenticatedUser(BaseModel):
    Email: Optional[str] = Field(None, description="The user's email address")
    MACId: Optional[str] = Field(
        None, description='The MAC identifier to use for API access'
    )
    MACToken: Optional[str] = Field(
        None, description='The MAC token to use for API access'
    )
    Name: Optional[str] = Field(None, description="The user's name")
    Token: Optional[str] = Field(None, description='The token to use for API access')
    UserID: Optional[int] = Field(None, description='The user ID')
    Username: Optional[str] = Field(
        None, description='The username used for authentication'
    )


class BearerAction(Enum):
    None_ = 'None'
    Reset = 'Reset'
    Disable = 'Disable'


class MACAction(Enum):
    None_ = 'None'
    Reset = 'Reset'
    Disable = 'Disable'


class APIModelsCredentials(BaseModel):
    BearerAction_1: Optional[BearerAction] = Field(
        None,
        alias='BearerAction',
        description='The action to perform on the bearer token. Optional. Defaults to ‘None’.',
    )
    MACAction_1: Optional[MACAction] = Field(
        None,
        alias='MACAction',
        description='The action to perform on the MAC token. Optional. Defaults to ‘None’.',
    )
    password: str = Field(
        ..., description='A secret word or phrase that must be used to gain admission'
    )
    username: str = Field(..., description='A unique ID a user needs to login with')


class APIModelsLog(BaseModel):
    ID: Optional[str] = None
    Message: Optional[str] = None
    TimeStamp: Optional[datetime] = None


class APIModelsNotification(BaseModel):
    CC_Addresses: Optional[List[str]] = None
    IsBodyHtml: bool
    MessageBody: str
    Subject: str
    To_Addresses: List[str]


class APIModelsPasswordReset(BaseModel):
    NewPassword: str = Field(..., description='The new password')
    Token: str = Field(..., description='The password reset token')


class APIModelsPasswordResetRequest(BaseModel):
    ParameterName: str = Field(
        ...,
        description='The query string parameter name to use for supplying the password reset token',
    )
    Url: str = Field(
        ..., description='The URL to direct the user to reset the password.'
    )
    Username: str = Field(..., description='The username to reset the password for')


class DataRequired(Enum):
    Yes = 'Yes'
    No = 'No'
    Optional = 'Optional'


class APIModelsPermission(BaseModel):
    DataDescription: Optional[str] = Field(
        None, description='Description of data to be provided with Role Authorization'
    )
    DataRequired_1: DataRequired = Field(
        ...,
        alias='DataRequired',
        description='Indicates if data is required or optional',
    )
    Description: Optional[str] = None
    Id: Optional[int] = Field(None, description='The identifier of the permission.')
    Name: str = Field(..., description='The name of the permission.')


class APIModelsRole(BaseModel):
    Description: str = Field(..., description='Role description')
    Id: Optional[int] = Field(None, description="The role's identifier.")
    Name: constr(pattern=r'^[0-9a-zA-Z]*?[a-zA-Z]+[0-9a-zA-Z]*$') = Field(
        ...,
        description='The name of the role. Must be alpha-numeric strings separated by a period (.).',
    )


class Action(Enum):
    Grant = 'Grant'
    Revoke = 'Revoke'


class APIModelsRolePermissionChange(BaseModel):
    Action_1: Action = Field(..., alias='Action', description='The action to take.')
    Permission: str = Field(
        ..., description='The name of the permission to grant or revoke.'
    )


class APIModelsRoleUserChange(BaseModel):
    Action_1: Action = Field(
        ..., alias='Action', description='The action to take with the user'
    )
    Id: int = Field(..., description='The Id of the User')


class APIModelsTokenOptions(BaseModel):
    BearerAction_1: Optional[BearerAction] = Field(
        None,
        alias='BearerAction',
        description='The action to perform on the bearer token. Optional. Defaults to ‘None’.',
    )
    MACAction_1: Optional[MACAction] = Field(
        None,
        alias='MACAction',
        description='The action to perform on the MAC token. Optional. Defaults to ‘None’.',
    )


class APIModelsUser(BaseModel):
    ChangePassword: Optional[str] = Field(
        None,
        description="Never Returned.  When changing a user's password, this field must contain the new password.",
    )
    Email: Optional[str] = Field(None, description="The user's email address")
    Name: Optional[str] = Field(None, description="The user's name")
    Password: Optional[str] = Field(
        None,
        description="Never Returned.  Required when creating a new user or updating a user.  When changing a user's password this field must contain the current password.",
    )
    UserID: Optional[int] = Field(None, description='The user ID')
    Username: Optional[str] = Field(
        None, description='The username used for authentication'
    )


class APIModelsUserEffectivePermission(BaseModel):
    PermissionId: Optional[int] = None
    PermissionName: Optional[str] = None
    UserID: Optional[int] = None


class APIModelsUserRoleChange(BaseModel):
    Action_1: Action = Field(
        ..., alias='Action', description='The action to take with the role'
    )
    Name: str = Field(..., description='The name of the role')


class APIPagedResponseMetadata(BaseModel):
    Limit: int = Field(
        ..., description='The number of entities this paged response is limited to.'
    )
    Offset: int = Field(
        ..., description='The number of entities prior to this page of items.'
    )
    TotalCount: int = Field(
        ..., description='The total number of entities matching the request.'
    )


class APIPagedResponseAPIModelsLog(BaseModel):
    Entities: List[APIModelsLog]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseAPIModelsPermission(BaseModel):
    Entities: List[APIModelsPermission]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseAPIModelsRole(BaseModel):
    Entities: List[APIModelsRole]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseAPIModelsUserEffectivePermission(BaseModel):
    Entities: List[APIModelsUserEffectivePermission]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseAPIModelsUser(BaseModel):
    Entities: List[APIModelsUser]
    Metadata: APIPagedResponseMetadata


class DurationUnits(Enum):
    Weeks = 'Weeks'
    Days = 'Days'
    Hours = 'Hours'
    Minutes = 'Minutes'


class AuthorizationCodesSharedModelsAuthorizationCodeUser(BaseModel):
    Email: Optional[str] = None
    Name: Optional[str] = None
    UserID: Optional[int] = None
    Username: Optional[str] = None


class AuthorizationCodesSharedModelsAuthorizationContactInformation(BaseModel):
    AuthorizationCodeID: int = Field(
        ..., description='AuthorizationCode ID that the contact information ties into.'
    )
    Code: Optional[str] = Field(None, description='The authorization code. Read Only.')
    Contact: str = Field(
        ...,
        description='Name of contact requesting an authorization code. Minimum length of 3 characters.',
    )
    CreatedBy: Optional[str] = Field(
        None, description='The name of the user that created this code. Read Only.'
    )
    CreatedDate: Optional[datetime] = Field(
        None, description='The date the authorization code was created.'
    )
    DealerCode: str = Field(
        ...,
        description='Dealer code that relates to the dealership. Minimum length of 3 characters.',
    )
    Dealership: str = Field(
        ..., description='Name of dealership. Minimum length of 3 characters.'
    )
    DefinitionName: Optional[str] = Field(
        None,
        description='The name of the definition used for generating this authorization code. Read Only.',
    )
    Email: Optional[str] = Field(None, description='Email of contact.')
    ID: Optional[int] = Field(None, description='ID of authorizationContactInformation')
    Notes: Optional[str] = Field(
        None, description='Optional notes used for internal use.'
    )
    Phone: str = Field(..., description='Phone number of contact.')


class AuthorizationCodesSharedModelsCategory(BaseModel):
    Description: Optional[str] = Field(
        None, description='A description of the Category.'
    )
    ID: Optional[str] = Field(None, description='The ID of the Category.')
    Name: Optional[str] = Field(None, description='The Name of the Category.')


class AuthorizationCodesSharedModelsCategoryUserReport(BaseModel):
    Categories: Optional[List[AuthorizationCodesSharedModelsCategory]] = None
    User: Optional[AuthorizationCodesSharedModelsAuthorizationCodeUser] = None


class AuthorizationCodesSharedModelsCodeValidationModel(BaseModel):
    ExpirationDate: Optional[datetime] = None
    IsValid: Optional[bool] = None


class Type(Enum):
    Boolean = 'Boolean'
    Decimal = 'Decimal'
    Float = 'Float'
    VariableLengthByteArray = 'VariableLengthByteArray'


class AuthorizationCodesSharedModelsDataField(BaseModel):
    DigitsPrecision: Optional[int] = Field(
        None,
        description="The number of decimal digits to be used by this data field. Required only by the 'Float' data type. Must be in range 1 - 15.",
    )
    MaxExponent: Optional[int] = Field(
        None,
        description="The maximum exponent to be used by this data field. Required only by the 'Float' data type. May not be greater than 307.",
    )
    MaxValue: Optional[float] = Field(
        None,
        description="The maximum value that can be represented by this data field. Required only by the 'Decimal' data type.",
    )
    MinExponent: Optional[int] = Field(
        None,
        description="The minimum exponent to be used by this data field. Required only by the 'Float' data type. May not be less than -292.",
    )
    MinValue: Optional[float] = Field(
        None,
        description="The minimum value that can be represented by this data field. Required only by the 'Decimal' data type.",
    )
    Name: str = Field(..., description='The name of the field.')
    ScaleFactor: Optional[float] = Field(
        None,
        description="The resolution of values that can be represented by this data field. The base value is multiplied by this to compute the final value. Required only by the 'Decimal' data type.",
    )
    Signed: Optional[bool] = Field(
        None,
        description="Indicates whether this value is signed. Required only by the 'Float' data type.",
    )
    Type_1: Type = Field(..., alias='Type', description='The type of this data field.')


class AuthorizationCodesSharedModelsParameter(BaseModel):
    Name: str = Field(..., description='The name of the parameter. May not be updated.')
    Value: str = Field(
        ..., description='The value of the parameter. May not be updated.'
    )


class Type1(Enum):
    Boolean = 'Boolean'
    Float = 'Float'
    Int = 'Int'
    StringCaseInsensitive = 'StringCaseInsensitive'
    StringCaseSensitive = 'StringCaseSensitive'


class AuthorizationCodesSharedModelsValidationField(BaseModel):
    Name: str = Field(..., description='The name of the field.')
    Type: Type1 = Field(..., description='The type for this validation field.')


class Status(Enum):
    Ready = 'Ready'
    InProgress = 'InProgress'
    Succeeded = 'Succeeded'
    Cancelled = 'Cancelled'
    Failed = 'Failed'


class BuildSystemSharedDTOActivityRunStatus(BaseModel):
    CurrentStep: Optional[int] = Field(
        None,
        description='The activity step currently executing, indicated by numeric order',
    )
    Status_1: Optional[Status] = Field(
        None, alias='Status', description='The status of the ActivityRun'
    )
    StepProgress: Optional[int] = Field(
        None,
        description='The percent progress from the currently executing step.  This value shall be null if progress is not available',
    )
    StepStatus: Optional[str] = Field(
        None, description='The status text from the currently executing step'
    )


class BuildSystemSharedDTOAgentStatus(BaseModel):
    LastStatusUpdate: Optional[datetime] = Field(
        None, description='ReadOnly. The UTC date and time of the last status update'
    )
    Online: bool = Field(..., description='Indicates if the agent is online')


class Direction(Enum):
    Input = 'Input'
    Output = 'Output'


class Type2(Enum):
    String = 'String'
    Boolean = 'Boolean'
    Integer = 'Integer'
    Float = 'Float'
    StringDictionary = 'StringDictionary'


class BuildSystemSharedDTOParameter(BaseModel):
    Direction_1: Optional[Direction] = Field(
        None, alias='Direction', description='The parameter direction (Input or Output)'
    )
    Name: Optional[str] = Field(None, description='The name of the parameter')
    Type: Optional[Type2] = Field(None, description='The data type of the parameter')


class SourceType(Enum):
    Constant = 'Constant'
    Variable = 'Variable'


class BuildSystemSharedDTOParameterMapping(BaseModel):
    Name: Optional[str] = Field(
        None, description='The name of the parameter this mapping applies to'
    )
    Source: Optional[str] = Field(
        None,
        description='The source of the value.  The meaning of this value is determined by the source type.  When the source type is “Constant” then source is the value formatted as a string.  When the source type is “Variable” then the source is the name of the variable',
    )
    SourceType_1: Optional[SourceType] = Field(
        None,
        alias='SourceType',
        description='The source type used for supplying the parameter',
    )


class BuildSystemSharedDTOParameterValue(BaseModel):
    Direction_1: Optional[Direction] = Field(
        None, alias='Direction', description='The parameter direction (Input or Output)'
    )
    Name: Optional[str] = Field(
        None, description='The name of the parameter this value is for'
    )
    Value: Optional[str] = Field(
        None, description='The parameter value in string representation'
    )


class BuildSystemSharedDTOStep(BaseModel):
    ConfigRequired: bool = Field(
        ...,
        description='Indicates if the step requires configuration values to be provided by the build agent',
    )
    Deleted: Optional[bool] = Field(
        None, description='Read Only.  Indicates if the record is deleted.'
    )
    Description: Optional[str] = Field(
        None, description='A description of the step to be presented to a user'
    )
    ImplementationID: str = Field(
        ...,
        description='The implementation ID used to lookup the step implementation when it is executed',
    )
    Name: str = Field(..., description='The name of the step')
    Parameters: Optional[List[BuildSystemSharedDTOParameter]] = Field(
        None, description='The parameters for this step'
    )
    StepID: Optional[int] = Field(None, description='The ID of the step')


class BuildSystemSharedDTOStepConfiguration(BaseModel):
    Configurations: Optional[List[str]] = Field(
        None,
        description='The configuration names supported.  The configurations collection is empty for steps which do not require configuration.',
    )
    StepImplementationID: str = Field(
        ..., description='The Implementation ID of the step this configuration is for'
    )


class BuildSystemSharedInterfacesIActivityRunStatus(BaseModel):
    CurrentStep: Optional[int] = Field(
        None,
        description='Gets or sets the number of the step the activity is currently running.',
    )
    Status_1: Optional[Status] = Field(
        None, alias='Status', description='Gets or sets the status of the activity run.'
    )
    StepProgress: Optional[int] = Field(
        None,
        description='Gets or sets a measurement of the current progress of the current step.',
    )
    StepStatus: Optional[str] = Field(
        None,
        description='Gets or sets a description of the current status of the currently \r\n            running step.',
    )


class BuildSystemSharedInterfacesIParameterMapping(BaseModel):
    Name: Optional[str] = Field(None, description='name')
    Source: Optional[str] = Field(None, description='Source')
    SourceType_1: Optional[SourceType] = Field(
        None, alias='SourceType', description='SourceType'
    )


class BuildSystemSharedInterfacesIParameterValue(BaseModel):
    Direction_1: Optional[Direction] = Field(
        None,
        alias='Direction',
        description='Gets or sets a value indicating whether the parameter value is an \r\n            input to the build part or an output from the build part.',
    )
    Name: Optional[str] = Field(
        None, description='Gets or sets the name of the parameter.'
    )
    Value: Optional[str] = Field(
        None, description='Gets or sets the value of the parameter.'
    )


class ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute(BaseModel):
    ContentDefinitionID: Optional[int] = Field(
        None,
        description='The ID of the content definition to which this attribute belongs.',
    )
    ID: Optional[int] = Field(None, description='The ID of this attribute.')
    Name: constr(pattern=r'[a-zA-Z0-9]+') = Field(
        ..., description='The name of this Attribute.'
    )
    Value: Optional[str] = Field(None, description='The value of this Attribute')


class ContentSubmissionSharedBusinessEntitiesContentReleaseVersion(BaseModel):
    ContentDefinitionID: Optional[int] = Field(None, description='ContentDefinitionID')
    ContentReleaseID: Optional[int] = Field(None, description='ContentReleaseID')
    Deleted: Optional[bool] = Field(None, description='deleted flag')
    PublisherUserID: Optional[int] = Field(None, description='PublisherUser ID')
    ReleaseID: Optional[int] = Field(None, description='rele4ase Id')
    TestReportUrl: Optional[str] = Field(
        None, description='The URL at which test reports for this content can be found'
    )
    UpdatedDate: Optional[datetime] = Field(None, description='Updated Date')
    Version: Optional[int] = Field(None, description='version')


class ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute(BaseModel):
    ContentSubmissionID: Optional[int] = Field(
        None,
        description='The ID of the content submission to which this attribute belongs.',
    )
    ID: Optional[int] = Field(None, description='The ID of this attribute.')
    Name: constr(pattern=r'[a-zA-Z0-9]+') = Field(
        ..., description='The name of this Attribute.'
    )
    Value: Optional[str] = Field(None, description='The value of this Attribute')


class ContentSubmissionSharedBusinessEntitiesContentSubmissionType(BaseModel):
    AttributeTemplate: Optional[str] = Field(
        None,
        description='A template for the Attribute from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}',
    )
    BuildDefinitionID: Optional[int] = Field(
        None,
        description="The ID of the Azure DevOps Build Definition for which to create a Build. Either 'BuildDefinitionID' or 'JobID' is required.",
    )
    CategoryTemplate: Optional[str] = Field(
        None,
        description='A template for the category from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}',
    )
    Description: str = Field(
        ..., description='A description for the Content Submission Type'
    )
    Enabled: Optional[bool] = Field(
        None,
        description='Indicates whether this submission type is available to be used',
    )
    ID: Optional[int] = Field(None, description='The ID of the Content Submission Type')
    InventoryPackageID: Optional[str] = Field(
        None,
        description='The ID of the Inventory Package from which to read the version of the package installed.',
    )
    JobID: Optional[int] = Field(
        None,
        description="The ID of the JobDefinition for which to initiate a Job. A value of '0' will cause a submission to fail. Either 'BuildDefinitionID' or 'JobID' is required.",
    )
    Name: str = Field(..., description='The Name of the Content Submission Type')
    ReleaseNotesDescription: Optional[str] = Field(
        None,
        description='A description of how release notes for this Content Submission Type are used',
    )


class ContentSubmissionSharedBusinessEntitiesRelease(BaseModel):
    BuildDate: Optional[datetime] = Field(None, description='Build Date')
    BundleIDs: Optional[List[str]] = Field(
        None, description='IDs of AUC Bundles associated with this Release.'
    )
    ReleaseDate: Optional[datetime] = Field(None, description='Release Date')
    ReleaseID: Optional[int] = Field(None, description='Release ID')
    ReleaseNumber: Optional[str] = Field(None, description='Release Number')
    Visible: Optional[bool] = Field(None, description='Visible')


class ContentSubmissionSharedBusinessEntitiesUserContentDefinition(BaseModel):
    ContentDefinitionID: Optional[int] = Field(
        None, description='The ID of the ContentDefinition.'
    )
    UserContentDefinitionID: Optional[int] = Field(
        None,
        description='Read Only. The ID of the User to ContentDefinition relationship.',
    )
    UserID: Optional[int] = Field(None, description='The ID of the user.')


class DealerDBModelsDealer(BaseModel):
    BillingAddress: Optional[str] = None
    BillingAddress2: Optional[str] = None
    BillingAddress3: Optional[str] = None
    BillingAddress4: Optional[str] = None
    BillingCity: Optional[str] = None
    BillingCountry: Optional[str] = None
    BillingCountryCode: Optional[str] = None
    BillingState: Optional[str] = None
    BillingZip: Optional[str] = None
    Brands: Optional[List[str]] = None
    DealerCode: Optional[str] = None
    DealerName: Optional[str] = None
    DealerStatus: Optional[str] = None
    DealerStatusUpdateDate: Optional[str] = None
    Filler: Optional[str] = None
    IsValid: Optional[bool] = None
    LanguagePreference: Optional[str] = None
    Region1: Optional[str] = None
    Region2: Optional[str] = None
    RegionMapping: Optional[str] = None
    RoleBrand: Optional[str] = None
    ShippingAddress2: Optional[str] = None
    ShippingAddress3: Optional[str] = None
    ShippingAddress4: Optional[str] = None
    ShippingCity: Optional[str] = None
    ShippingCountry: Optional[str] = None
    ShippingState: Optional[str] = None
    ShippingStreet: Optional[str] = None
    ShippingZip: Optional[str] = None
    Telephone: Optional[str] = None
    VATCode: Optional[str] = None


class DealerDBModelsDealersPerCountry(BaseModel):
    Count: Optional[int] = None
    Country: Optional[str] = None


class DealerDBModelsEDTLiteRegistration(BaseModel):
    DealerCode: Optional[str] = Field(
        None, description='The dealer code with which the EDT Lite was created.'
    )
    ExpirationDate: datetime = Field(
        ..., description='The date at which the content of the EDT Lite expires.'
    )
    InstanceID: str = Field(..., description='The identifier for the EDT Lite.')
    VoucherCode: str = Field(
        ..., description='The voucher code with which the EDT Lite was created.'
    )


class LicenseActivationType(Enum):
    EDT = 'EDT'
    EDTLite = 'EDTLite'


class DealerDBModelsLicense(BaseModel):
    Active: Optional[bool] = Field(None, description='True if license is active.')
    CreatedDate: Optional[datetime] = Field(
        None, description='The date the license was created.'
    )
    DeactivatedDate: Optional[datetime] = Field(
        None, description='The date the license was deactivated.'
    )
    LicenseActivationType_1: Optional[LicenseActivationType] = Field(
        None,
        alias='LicenseActivationType',
        description='The type of license (e.g. EDT, EDT Lite)',
    )
    LicenseID: Optional[str] = Field(None, description='The LicenseID')
    LicenseVersion: Optional[str] = Field(
        None, description='The version of the license.'
    )
    RefreshDate: Optional[datetime] = Field(
        None, description='The date the license was refreshed.'
    )
    SystemInfo: Optional[str] = Field(
        None, description='Information about the system which is licensed.'
    )
    UpdatedLicenseVersion: Optional[str] = Field(
        None,
        description='The updated version of the license.  A value in this field indicates that the update has not been confirmed.',
    )
    VoucherCode: Optional[str] = Field(
        None, description='The voucher code that generated the license.'
    )


class DealerDBModelsLicenseActivation(BaseModel):
    Key: Optional[str] = Field(
        None,
        description='The license key in base64 format.  This is only provided when the LicenseData is a new license.',
    )
    LicenseData: Optional[str] = Field(
        None, description='The license data in base64 format.'
    )


class DealerDBModelsLicenseActivationConfirm(BaseModel):
    LicenseVersion: str = Field(..., description='The license version to confirm')


class DealerDBModelsLicenseActivationCreate(BaseModel):
    DealerCode: str = Field(
        ..., description='The Dealer Code of the dealer activating the license'
    )
    LicenseActivationType_1: Optional[LicenseActivationType] = Field(
        None,
        alias='LicenseActivationType',
        description='The type of license to create (e.g. EDT, EDT Lite)',
    )
    PostalCode: str = Field(..., description="The dealer's postal code (zip code)")
    SystemInfo: str = Field(
        ..., description='Information about  the system being activated'
    )
    VoucherCode: str = Field(..., description='The Voucher Code to use for activation')


class DealerDBModelsLicenseActivationUpdate(BaseModel):
    LicenseVersion: str = Field(..., description='The license version to update')
    SystemInfo: Optional[str] = Field(
        None, description='Information about  the system being activated'
    )


class Type3(Enum):
    Commercial = 'Commercial'
    Internal = 'Internal'
    Temporary = 'Temporary'
    RightToRepair = 'RightToRepair'


class DealerDBModelsVoucher(BaseModel):
    CreatedDate: Optional[datetime] = Field(
        None, description='Read-Only. The date the voucher was created.'
    )
    DealerCode: Optional[str] = Field(
        None,
        description='The dealer code the voucher is assigned to.  Required for commercial and right to repair vouchers.',
    )
    Deleted: Optional[bool] = Field(
        None, description='Read-Only. True if voucher has been deleted.'
    )
    Email: Optional[str] = Field(None, description='Required for internal vouchers.')
    ExpirationDate: Optional[datetime] = Field(
        None,
        description='The expiration date of the voucher. Required for Temporary and Right to Repair Vouchers.',
    )
    LicenseTo: Optional[str] = Field(None, description='Required for Internal Vouchers')
    ModifiedBy: Optional[str] = Field(
        None,
        description='Read-Only. The user that made the last modification to the voucher.',
    )
    OrderNumber: Optional[str] = Field(
        None,
        description='The order number of a license. Required for Commercial and Right To Repair Vouchers. Not supported for other Vouchers.',
    )
    Punched: Optional[bool] = Field(
        None,
        description='True if voucher has aleady been used.  False if the voucher has not been used.',
    )
    PunchedDate: Optional[datetime] = Field(
        None, description='Read-Only. The date the voucher was punched.'
    )
    Purpose: Optional[str] = Field(
        None,
        description='Required for Internal Vouchers. Not supported for other Vouchers.',
    )
    Type: Optional[Type3] = Field(
        None,
        description='The type of voucher. Commercial is the default if not specified.',
    )
    VoucherCode: Optional[str] = Field(None, description='The voucher code.')


class DealerDBModelsVoucherHistory(BaseModel):
    ChangedDate: Optional[datetime] = None
    CreatedDate: Optional[datetime] = Field(
        None, description='Read-Only. The date the voucher was created.'
    )
    DealerCode: Optional[str] = Field(
        None,
        description='The dealer code the voucher is assigned to.  Required for commercial vouchers.',
    )
    Deleted: Optional[bool] = Field(
        None, description='Read-Only. True if voucher has been deleted.'
    )
    Email: Optional[str] = Field(
        None, description='The email address. Required for Internal Vouchers'
    )
    ExpirationDate: Optional[datetime] = Field(
        None,
        description='The expiration date of the voucher. Required for Temporary Vouchers.',
    )
    ID: Optional[int] = Field(None, description='The id of the voucher history item')
    LicenseTo: Optional[str] = Field(None, description='Required for Internal Vouchers')
    ModifiedBy: Optional[str] = Field(
        None,
        description='Read-Only. The user that made the last modification to the voucher.',
    )
    OrderNumber: Optional[str] = Field(
        None,
        description='The order number of a commercial license. Required for Commercial Vouchers. Not supported for other Vouchers.',
    )
    Punched: Optional[bool] = Field(
        None,
        description='True if voucher has aleady been used.  False if the voucher has not been used.',
    )
    PunchedDate: Optional[datetime] = Field(
        None, description='Read-Only. The date the voucher was punched.'
    )
    Purpose: Optional[str] = Field(None, description='Required for Internal Vouchers')
    Type: Optional[Type3] = Field(None, description='The type of voucher.')
    VoucherCode: Optional[str] = Field(None, description='The voucher code.')


class State2(Enum):
    Created = 'Created'
    Available = 'Available'
    Removed = 'Removed'


class GlobalResourcesSharedModelsFileDownload(BaseModel):
    CRC: str = Field(
        ...,
        description='The crc of the file (SHA256, HEX-encoded). Must be provided when creating a file.',
    )
    ContentType: str = Field(
        ..., description='The type of file; sent as the content-type header.'
    )
    Description: str = Field(..., description='The description of the file.')
    Id: Optional[str] = Field(None, description='The Id of the file.')
    IsPublic: bool = Field(
        ...,
        description='Indicates whether this file is available to the public for download.',
    )
    Name: str = Field(..., description='The name of the file when downloaded.')
    Path: str = Field(..., description='The Path of the file.')
    Size: Optional[int] = Field(
        None,
        description="The size of the file in bytes. Null until assigned by server when marked as 'Available'. Read Only",
    )
    State: State2 = Field(
        ...,
        description="Indicates the state of this file. Must be 'Created' when created.",
    )


class GlobalResourcesSharedModelsGlobalImageCategory(BaseModel):
    Id: Optional[str] = Field(None, description='The Id of the GlobalImage Categories.')
    Name: str = Field(..., description='The name of the globalImage Catetory.')


class GlobalResourcesSharedModelsLanguage(BaseModel):
    Description: str = Field(
        ...,
        description='The description of the language (e.g. “English – United States”).',
    )
    IsDeleted: Optional[bool] = Field(
        None,
        description='Indicates whether the API supports the language. Must be false when created. Read Only.',
    )
    LocaleId: int = Field(..., description='The Locale Id of the language.')


class State4(Enum):
    Original = 'Original'
    Requested = 'Requested'
    Processing = 'Processing'
    Processed = 'Processed'
    Validated = 'Validated'
    Invalidated = 'Invalidated'
    RequestPending = 'RequestPending'
    CreatePending = 'CreatePending'


class GlobalResourcesSharedModelsStringTranslation(BaseModel):
    AuthorId: Optional[int] = Field(
        None, description='The id of the user to last edit thie translation'
    )
    LanguageId: Optional[int] = Field(
        None, description='The id of the language of the translation'
    )
    State: Optional[State4] = Field(None, description='The state of the translation')
    StringId: Optional[str] = Field(
        None, description='The id of the string that is translated'
    )
    StringValue: str = Field(..., description='The translated string')
    Timestamp: Optional[str] = Field(
        None,
        description='A value indicating the last modification of this translation. Read Only.',
    )


class State5(Enum):
    NotSubmitted = 'NotSubmitted'
    Submitted = 'Submitted'
    Cancelled = 'Cancelled'
    Completed = 'Completed'


class GlobalResourcesSharedModelsTranslationRequest(BaseModel):
    ApprovalUserId: Optional[int] = Field(
        None,
        description='The ID of the user from which approval for the request is required',
    )
    CCEmailAddresses: List[str] = Field(
        ...,
        description='Additional email addresses to CC on emails pertaining to the request',
    )
    ChargeToAccount: str = Field(
        ..., description='The account to charge for the request'
    )
    Deadline: datetime = Field(
        ...,
        description='The date by which the translations in the request are needed. Defaults to 30 days from the current date',
    )
    Id: Optional[int] = Field(None, description='The ID of the request')
    LocaleIds: List[int] = Field(
        ...,
        description='Locale IDs to which these strings are requested to be translated',
    )
    Notes: str = Field(
        ..., description='Additional notes or comments about the request'
    )
    QuestionsUserId: Optional[int] = Field(
        None,
        description='The ID of the user to which to address questions regarding the request',
    )
    State: State5 = Field(..., description='The state of the request')
    SubmittedBy: Optional[int] = Field(
        None, description='The ID of the User that submitted the request'
    )
    TranslatorEmail: Optional[str] = Field(
        None, description='The email address for the translator'
    )
    TranslatorName: Optional[str] = Field(
        None, description='The name of the translator'
    )


class State6(Enum):
    OutForProcessing = 'OutForProcessing'
    Processing = 'Processing'
    PendingApproval = 'PendingApproval'
    OutForTranslation = 'OutForTranslation'
    Cancelled = 'Cancelled'
    Completed = 'Completed'


class GlobalResourcesSharedModelsTranslationSetAttribute(BaseModel):
    ID: Optional[int] = Field(None, description='The ID of this attribute.')
    Name: constr(pattern=r'[a-zA-Z0-9]+') = Field(
        ..., description='The name of this Attribute.'
    )
    TranslationSetID: Optional[int] = Field(
        None,
        description='The ID of the translation set to which this attribute belongs.',
    )
    Value: Optional[str] = Field(None, description='The value of this Attribute')


class GlobalResourcesSharedModelsTranslationSetSourceString(BaseModel):
    DescriptionForTranslator: Optional[str] = Field(
        None,
        description='A description of the string to translate. This should contain context and parameter count.',
    )
    LanguageID: Optional[int] = Field(
        None, description='The ID of the language from which to translate the string'
    )
    StringID: Optional[str] = Field(
        None, description='The ID of the string to translate'
    )
    StringValue: Optional[str] = Field(None, description='The string to translate')


class GlobalResourcesSharedModelsTranslationSetStatistics(BaseModel):
    LanguageIDs: Optional[List[int]] = Field(
        None,
        description='The IDs of languages for which translaions in this translation set have been requested',
    )
    StringCount: Optional[int] = Field(
        None,
        description='The count of unique string definitions contained in this translation set',
    )


class GlobalResourcesSharedModelsTranslationSetString(BaseModel):
    LanguageID: int = Field(
        ..., description='The ID of the language into which to translate the string'
    )
    StringID: str = Field(
        ..., description='The Id of the string translation that has been requested'
    )
    StringValue: Optional[str] = Field(
        None, description='The string value returned from the translator'
    )
    TranslationSetId: int = Field(..., description='The id of the TranslationSet')


class OASSupportSharedModelsTranslationKey(BaseModel):
    ID: Optional[int] = Field(
        None, description='The identifier for the translationKey. Read Only.'
    )
    KeyName: str = Field(
        ..., description='The key name of the item. One example is tkODX_HWIKM14R01'
    )
    StringID: str = Field(..., description='Foreign key to StringDefinitionID')


class SystemObject(BaseModel):
    pass


class UpdateSystemModelsAttributeValue(BaseModel):
    Key: str = Field(..., description='The attribute name')
    TimeStamp: Optional[datetime] = Field(None, description='Read Only. The timestamp.')
    Value: Optional[str] = Field(None, description='The value')


class SubscriptionType(Enum):
    Required = 'Required'
    IncludeByDefault = 'IncludeByDefault'
    ExcludeByDefault = 'ExcludeByDefault'


class UpdateSystemModelsBundle(BaseModel):
    Active: Optional[bool] = Field(
        None,
        description='Default Value: false. During the creation of the Bundle, this field must be false.',
    )
    BundleID: Optional[str] = Field(None, description='Read-Only.')
    BundleNumber: int = Field(..., description='The bundle number')
    Description: str = Field(..., description='The Bundle description.')
    UpdateGroupID: str = Field(
        ..., description='The update group this bundle belongs to.'
    )


class UpdateSystemModelsCategory(BaseModel):
    Values: Optional[List[UpdateSystemModelsAttributeValue]] = None
    category: str = Field(..., description='The category name')


class UpdateSystemModelsClient(BaseModel):
    ClientID: Optional[str] = Field(None, description='Read Only. The id of the client')
    LastCheckin: Optional[datetime] = Field(
        None,
        description="Read Only. The time of the client's last checkin with the server.",
    )
    Tag: Optional[str] = Field(
        None,
        description='A description of the client that can be used for easy reference',
    )


class UpdateSystemModelsClientStatus(BaseModel):
    ClientID: Optional[str] = Field(None, description='The Client ID')
    LastCheckin: Optional[datetime] = Field(
        None, description="The time of the client's last check-in"
    )
    MinutesElapsed: Optional[int] = Field(
        None,
        description='The number of minutes that have passed since the last check-in',
    )
    ReportResult: Optional[str] = Field(
        None,
        description="The result for the client included in the UpdateGroup's report",
    )
    ReportResultIsValid: Optional[bool] = Field(
        None,
        description='True if the result for the client matches what is expected for the UpdateGroup',
    )
    ReportValue: Optional[str] = Field(
        None,
        description="The value for the client included in the UpdateGroup's report",
    )
    Tag: Optional[str] = Field(None, description='A descriptive name for the client')


class UpdateSystemModelsPackage(BaseModel):
    Autorun: Optional[bool] = Field(
        None,
        description='Value is true if package should run automatically. Default value is false.',
    )
    CRC: str = Field(..., description='The CRC used to validate the download.')
    Description: str = Field(..., description='The package description')
    LocalizedName: Optional[str] = Field(
        None,
        description='Optional. The StringID used to localize the name of the Package',
    )
    Notes: Optional[str] = Field(None, description='Notes about the package')
    PackageID: Optional[str] = Field(None, description='Read Only. The package ID')
    PackageTypeID: str = Field(
        ..., description='The id of the package type this package belongs to.'
    )
    PreviousVersion: Optional[conint(ge=0, le=2147483647)] = Field(
        None,
        description='For delta packages, the previous version required.  For non-delta packages, the Previous version is 0.  Default value is 0.',
    )
    ReleaseDate: datetime = Field(..., description='The date the package was released')
    Released: Optional[bool] = Field(
        None, description='True if the package is released.  Default value is False.'
    )
    RemoveOnSuccess: Optional[bool] = Field(
        None,
        description='True to remove the package after successful execution.  Default value is False.',
    )
    Size: Optional[int] = Field(
        None,
        description='The size of the file at the specified URL.  If a size is not supplied at creation time, the size will be determined by the response from the URL.\r\n            If the size provided does not match the size in the response from the URL an error will be returned.',
    )
    Switches: Optional[str] = Field(
        None,
        description='The command line arguments for the package.  Default value is an empty string.',
    )
    Url: str = Field(..., description='The Url to download the package from.')
    Version: conint(ge=1, le=2147483647) = Field(..., description='The version.')


class UpdateSystemModelsPackageReport(BaseModel):
    Categories: Optional[List[UpdateSystemModelsCategory]] = Field(
        None, description="The package report's categories."
    )
    PackageDescription: Optional[str] = Field(
        None, description='Read Only. The package description'
    )
    PackageID: Optional[str] = Field(None, description='The PackageID.')


class UpdateSystemModelsPackageStatus(BaseModel):
    ClientID: Optional[str] = Field(None, description='The id of the client')
    ClientKey: Optional[str] = Field(None, description="The client's tag")
    DownloadTime: Optional[str] = Field(
        None, description='The amount of time spent downloading'
    )
    Downloaded: Optional[str] = Field(
        None, description='The number of bytes downloaded'
    )
    InstallCompleted: Optional[str] = Field(
        None, description='The time the package completed'
    )
    InstallResult: Optional[str] = Field(None, description='The package result')
    InstallStarted: Optional[str] = Field(
        None, description='The time the package was started'
    )
    InstallTime: Optional[str] = Field(
        None, description='The amount of time required to run the package'
    )
    Percentage: Optional[str] = Field(
        None, description='The download completion percentage'
    )
    Size: Optional[str] = Field(None, description='The total size of the package')
    Timestamp: Optional[datetime] = Field(
        None, description='The time the status was last updated'
    )


class UpdateSystemModelsPackageStatusSummary(BaseModel):
    AverageDownloadTime: Optional[str] = Field(
        None, description='The average time required to complete the download'
    )
    AverageInstallTime: Optional[str] = Field(
        None, description='The average time required to complete the install'
    )
    Downloaded: Optional[int] = Field(
        None, description='The number of clients that have completed the download'
    )
    Error: Optional[int] = Field(None, description='The result of the install')
    Installed: Optional[int] = Field(
        None, description='The number of clients that have completed the install'
    )
    Package: Optional[str] = Field(None, description='The name of the package')
    PackageID: Optional[str] = Field(None, description='The ID of the package')
    PackageStatusItems: Optional[List[UpdateSystemModelsPackageStatus]] = Field(
        None, description='The individual package status items'
    )


class UpdateSystemModelsPackageType(BaseModel):
    Attribute: Optional[str] = Field(
        None,
        description='The inventory attribute (from the InventoryPackage) used to determine what version of this package type is installed.',
    )
    Category: Optional[str] = Field(
        None,
        description='The inventory category (from the InventoryPackage) used to determine what version of this package type is installed.',
    )
    Description: str = Field(..., description='The description of the package type')
    Icon: Optional[str] = Field(
        None, description='Optional.  The icon to use for the PackageType, in base 64'
    )
    InventoryFrequency: Optional[int] = Field(
        None,
        description='The number of minutes to wait before requesting another inventory.  The default value is 1440 (24 hours).',
    )
    InventoryPackage: Optional[str] = Field(
        None,
        description='The inventory package used to determine what version of this package type is installed.',
    )
    LocalizedDescription: Optional[str] = Field(
        None,
        description='Optional. The StringID used to localize the description of the PackageType',
    )
    LocalizedName: Optional[str] = Field(
        None,
        description='Optional. The StringID used to localize the name of the PackageType',
    )
    MaxDeltaPackages: Optional[int] = Field(
        None,
        description='The maximum number of "chained" delta packages to use when updating the client',
    )
    PackageTypeID: Optional[str] = Field(
        None, description='Read Only. The package type id.'
    )


class UpdateSystemModelsPackageTypeIDtoBundle(BaseModel):
    BundleID: str = Field(..., description='The bundle to include the package in.')
    PackageTypeID: str = Field(
        ..., description='The package type id of the package to include'
    )
    PackageVersion: int = Field(
        ..., description='The package version of the package to include'
    )
    Priority: conint(ge=1, le=100) = Field(
        ...,
        description='The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.',
    )
    SubscriptionType_1: Optional[SubscriptionType] = Field(
        None,
        alias='SubscriptionType',
        description='Optional. The type of subscription supported.  The default subscription type is Required.',
    )


class UpdateSystemModelsPagedClientStatusMetadata(BaseModel):
    Limit: int = Field(
        ..., description='The number of entities this paged response is limited to.'
    )
    Offset: int = Field(
        ..., description='The number of entities prior to this page of items.'
    )
    ReportResultExpected: str = Field(
        ..., description='The label for data contained in ClientStatus.ReportResults'
    )
    ReportResultLabel: str = Field(
        ..., description='The label for data contained in ClientStatus.ReportResults'
    )
    ReportValueLabel: str = Field(
        ..., description='The label for data contained in ClientStatus.ReportValue'
    )
    TotalCount: int = Field(
        ..., description='The total number of entities matching the request.'
    )


class UpdateSystemModelsPriorityPackage(BaseModel):
    Autorun: Optional[bool] = Field(
        None,
        description='Read Only. From the package specified by package ID.\r\n            Value is true if package should run automatically. Default value is false.',
    )
    CRC: Optional[str] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    ClientID: str = Field(
        ..., description='The ID of the client to receive the priority package'
    )
    Description: Optional[str] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    Notes: Optional[str] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    PackageID: str = Field(
        ..., description='The ID of the package to push as a priority package.'
    )
    PackageTypeID: Optional[str] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    PreviousVersion: Optional[int] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    PriorityPackageID: Optional[str] = Field(
        None, description='Read Only. The ID of the priority package.'
    )
    ReleaseDate: Optional[datetime] = Field(
        None,
        description='Read Only. From the package specified by package ID.\r\n            The date the package was released',
    )
    Released: Optional[bool] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    RemoveOnSuccess: Optional[bool] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    Size: Optional[int] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    Switches: Optional[str] = Field(
        None,
        description='The command line arguments for the priority package.  Default value is an empty string.',
    )
    TimeStamp: Optional[datetime] = Field(
        None, description='Read Only. The timestamp of the priority package.'
    )
    Url: Optional[str] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )
    Version: Optional[int] = Field(
        None, description='Read Only. From the package specified by package ID.'
    )


class UpdateSystemModelsUpdateGroup(BaseModel):
    Description: str = Field(..., description='The description of the update group')
    ID: Optional[str] = None
    InventoryFrequency: Optional[int] = Field(
        None,
        description='The time in minutes between inventory checks. Default value is 1440 minutes (one day).',
    )
    InventoryPackage: Optional[str] = Field(
        None, description='The Package ID of the package used for inventory'
    )
    LocalizedDescription: Optional[str] = Field(
        None,
        description='Optional. The StringID used to localize the description of the update group',
    )
    LocalizedName: Optional[str] = Field(
        None,
        description='Optional. The StringID used to localize the name of the update group',
    )
    Priority: conint(ge=1, le=100) = Field(
        ...,
        description='The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.',
    )
    ReportField: Optional[str] = Field(
        None,
        description='A field to return in the status report for this update group.\r\n            Specify the field with the format [Label]: {[InventoryPackageID].[Category].[Attribute]}.  (i.e. example: {bec778ca-278d-424a-867a-4653a1a19e86.MyCategory.MyAttribute})',
    )
    UpdateType: str = Field(..., description='The update type name')
    ValidatingField: Optional[str] = Field(
        None,
        description='A field used for validation in the status report for this update group.\r\n            Specify the field with the format [Label]: {[InventoryPackageID].[Category].[Attribute]}.  (i.e. example: {bec778ca-278d-424a-867a-4653a1a19e86.MyCategory.MyAttribute})',
    )
    ValueToValidate: Optional[str] = Field(
        None, description='The value to validate the ValidationField against.'
    )
    Version: Optional[str] = Field(
        None,
        description='The version of the UpdateGroup, this value is incremented with each modification to a related Bundle or PackageType',
    )


class UpdateSystemModelsUpdateGroupClientRelationship(BaseModel):
    Active: Optional[bool] = Field(
        None, description='The subscription status.  The status is active by default.'
    )
    ClientID: str = Field(
        ..., description='Read Only after creation. The client id of the subscriber.'
    )
    LastCheckin: Optional[datetime] = Field(
        None, description='ReadOnly. The timestamp of the last checkin.'
    )
    RelationshipID: Optional[str] = Field(
        None,
        description='Read Only after creation. The relationship id.  A relationship id will be assigned if not provided on creation.',
    )
    UpdateGroupID: str = Field(
        ..., description='Read Only after creation. The update group to subscribe to.'
    )


class UpdateSystemModelsUpdateGroupSubscription(BaseModel):
    ClientID: str = Field(..., description='The ClientID.')
    Include: bool = Field(
        ..., description='True to receive content of type indicated by PackageTypeID.'
    )
    PackageTypeID: str = Field(
        ..., description='The PackageType to set subscription status for'
    )
    UpdateGroupID: str = Field(
        ..., description='The Update Group this subscription is relevant for.'
    )
    UpdateGroupSubscriptionID: Optional[int] = Field(
        None,
        description='The Update Group Subscription ID.  This ID will be automatically assigned when creating an Update Group Subscription.',
    )


class UpdateSystemModelsUpdateMetricsDataActiveVersionByClientRecord(BaseModel):
    BundleNumber: Optional[int] = None
    ClientCount: Optional[int] = None
    ReleaseName: Optional[str] = None


class UpdateSystemModelsUpdateMetricsDataCurrentStateByClientRecord(BaseModel):
    ClientCount: Optional[int] = None
    State: Optional[str] = None


class UpdateSystemModelsUpdateMetricsDataPackageErrorsRecord(BaseModel):
    ClientCount: Optional[int] = None
    ErrorCode: Optional[str] = None
    LongDescription: Optional[str] = None
    ShortDescription: Optional[str] = None


class ApiV2AftermarketServicesEnginesSerialNumberIQACodesGetResponse(
    RootModel[List[str]]
):
    root: List[str]


class ApiV2AftermarketServicesEnginesSerialNumberIQACodesPutRequest(
    RootModel[List[str]]
):
    root: List[str]


class ApiV2AftermarketServicesEnginesSerialNumberProductionDataGetResponse(
    RootModel[List[AGCOPowerServicesModelsProductionData]]
):
    root: List[AGCOPowerServicesModelsProductionData]


class ApiV2BrandsGetResponse(RootModel[List[str]]):
    root: List[str]


class ApiV2ClientsClientIDCachedFilesGetResponse(RootModel[List[str]]):
    root: List[str]


class ApiV2ClientsClientIDPackageReportsGetResponse(
    RootModel[List[UpdateSystemModelsPackageReport]]
):
    root: List[UpdateSystemModelsPackageReport]


class ApiV2ClientsClientIDPackageReportsBatchPutRequest(
    RootModel[List[UpdateSystemModelsPackageReport]]
):
    root: List[UpdateSystemModelsPackageReport]


class ApiV2ContentDefinitionAttributesBatchPutRequest(
    RootModel[List[ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute]]
):
    root: List[ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute]


class ApiV2ContentDefinitionsContentDefinitionIDAttributesBatchPostRequest(
    RootModel[List[ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute]]
):
    root: List[ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute]


class ApiV2ContentSubmissionAttributesBatchPutRequest(
    RootModel[List[ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute]]
):
    root: List[ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute]


class ApiV2ContentSubmissionTypesGetResponse(
    RootModel[List[ContentSubmissionSharedBusinessEntitiesContentSubmissionType]]
):
    root: List[ContentSubmissionSharedBusinessEntitiesContentSubmissionType]


class ApiV2ContentSubmissionsContentSubmissionIDAttributesBatchPostRequest(
    RootModel[List[ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute]]
):
    root: List[ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute]


class Status4(Enum):
    Active = 'Active'
    Inactive = 'Inactive'
    All = 'All'


class Status6(Enum):
    Active = 'Active'
    Completed = 'Completed'
    All = 'All'


class SubscriptionTypeFilter(Enum):
    RequiredOnly = 'RequiredOnly'
    Default = 'Default'
    All = 'All'


class ApiV2ReportingCurrentPackagesInUpdateGroupGetResponse(
    RootModel[List[UpdateSystemModelsPackage]]
):
    root: List[UpdateSystemModelsPackage]


class ApiV2RolesIdPermissionsPutRequest(RootModel[List[APIModelsRolePermissionChange]]):
    root: List[APIModelsRolePermissionChange]


class ApiV2RolesIdUsersPutRequest(RootModel[List[APIModelsRoleUserChange]]):
    root: List[APIModelsRoleUserChange]


class ApiV2StringTranslationsBatchPutRequest(
    RootModel[List[GlobalResourcesSharedModelsStringTranslation]]
):
    root: List[GlobalResourcesSharedModelsStringTranslation]


class ApiV2TranslationRequestsIdStringsPutRequest(RootModel[List[str]]):
    root: List[str]


class ApiV2TranslationSetAttributesBatchPutRequest(
    RootModel[List[GlobalResourcesSharedModelsTranslationSetAttribute]]
):
    root: List[GlobalResourcesSharedModelsTranslationSetAttribute]


class ApiV2TranslationSetsIDAttributesBatchPostRequest(
    RootModel[List[GlobalResourcesSharedModelsTranslationSetAttribute]]
):
    root: List[GlobalResourcesSharedModelsTranslationSetAttribute]


class ApiV2TranslationSetsIDStringsPutRequest(
    RootModel[List[GlobalResourcesSharedModelsTranslationSetString]]
):
    root: List[GlobalResourcesSharedModelsTranslationSetString]


class ApiV2UpdateGroupSubscriptionsBatchPostRequest(
    RootModel[List[UpdateSystemModelsUpdateGroupSubscription]]
):
    root: List[UpdateSystemModelsUpdateGroupSubscription]


class ApiV2UpdateGroupSubscriptionsBatchPutRequest(
    RootModel[List[UpdateSystemModelsUpdateGroupSubscription]]
):
    root: List[UpdateSystemModelsUpdateGroupSubscription]


class ApiV2UsersIdRolesPutRequest(RootModel[List[APIModelsUserRoleChange]]):
    root: List[APIModelsUserRoleChange]


class Deleted(Enum):
    NotDeleted = 'NotDeleted'
    Deleted = 'Deleted'
    All = 'All'


class Status8(Enum):
    Ready = 'Ready'
    InProgress = 'InProgress'
    Succeeded = 'Succeeded'
    Cancelled = 'Cancelled'
    Failed = 'Failed'


class APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationContactInformation(
    BaseModel
):
    Entities: Optional[
        List[AuthorizationCodesSharedModelsAuthorizationContactInformation]
    ] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport(BaseModel):
    Entities: Optional[List[AuthorizationCodesSharedModelsCategoryUserReport]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseAuthorizationCodesSharedModelsCategory(BaseModel):
    Entities: Optional[List[AuthorizationCodesSharedModelsCategory]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsFileDownload(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsFileDownload]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsGlobalImageCategory(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsGlobalImageCategory]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsLanguage(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsLanguage]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsStringTranslation(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsStringTranslation]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsTranslationRequest(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsTranslationRequest]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsTranslationSetAttribute(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsTranslationSetAttribute]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsTranslationSetSourceString(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsTranslationSetSourceString]] = (
        None
    )
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsTranslationSetString(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsTranslationSetString]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseOASSupportSharedModelsTranslationKey(BaseModel):
    Entities: Optional[List[OASSupportSharedModelsTranslationKey]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIPagedResponseBuildSystemSharedDTOStep(BaseModel):
    Entities: List[BuildSystemSharedDTOStep]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute(
    BaseModel
):
    Entities: List[ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion(
    BaseModel
):
    Entities: List[ContentSubmissionSharedBusinessEntitiesContentReleaseVersion]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute(
    BaseModel
):
    Entities: List[ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease(BaseModel):
    Entities: List[ContentSubmissionSharedBusinessEntitiesRelease]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition(
    BaseModel
):
    Entities: List[ContentSubmissionSharedBusinessEntitiesUserContentDefinition]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseDealerDBModelsDealer(BaseModel):
    Entities: List[DealerDBModelsDealer]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseDealerDBModelsDealersPerCountry(BaseModel):
    Entities: List[DealerDBModelsDealersPerCountry]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseDealerDBModelsLicense(BaseModel):
    Entities: List[DealerDBModelsLicense]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseDealerDBModelsVoucherHistory(BaseModel):
    Entities: List[DealerDBModelsVoucherHistory]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseDealerDBModelsVoucher(BaseModel):
    Entities: List[DealerDBModelsVoucher]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsBundle(BaseModel):
    Entities: List[UpdateSystemModelsBundle]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata(
    BaseModel
):
    Entities: List[UpdateSystemModelsClientStatus]
    Metadata: UpdateSystemModelsPagedClientStatusMetadata


class APIPagedResponseUpdateSystemModelsClient(BaseModel):
    Entities: List[UpdateSystemModelsClient]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsPackageStatusSummary(BaseModel):
    Entities: List[UpdateSystemModelsPackageStatusSummary]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle(BaseModel):
    Entities: List[UpdateSystemModelsPackageTypeIDtoBundle]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsPackageType(BaseModel):
    Entities: List[UpdateSystemModelsPackageType]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsPackage(BaseModel):
    Entities: List[UpdateSystemModelsPackage]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsPriorityPackage(BaseModel):
    Entities: List[UpdateSystemModelsPriorityPackage]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship(BaseModel):
    Entities: List[UpdateSystemModelsUpdateGroupClientRelationship]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsUpdateGroupSubscription(BaseModel):
    Entities: List[UpdateSystemModelsUpdateGroupSubscription]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsUpdateGroup(BaseModel):
    Entities: List[UpdateSystemModelsUpdateGroup]
    Metadata: APIPagedResponseMetadata


class AuthorizationCodesSharedModelsAuthorizationCode(BaseModel):
    Code: Optional[str] = Field(
        None, description='The code to enter to unlock a feature. Read only.'
    )
    CreatedByUserID: Optional[int] = Field(
        None,
        description='The ID of the user that created this authorization code. Read only.',
    )
    CreatedDate: Optional[datetime] = Field(
        None, description='A timestamp of when this code was created. Read only.'
    )
    DataParameters: Optional[List[AuthorizationCodesSharedModelsParameter]] = Field(
        None,
        description='The parameters and values contained as data in this authorization code. May not be updated.',
    )
    DefinitionID: Optional[str] = Field(
        None,
        description='The id of the definition for this authorization code. May not be updated.',
    )
    DeletedByUserID: Optional[int] = Field(
        None,
        description='The ID of the user that deleted this authorization code. Read only.',
    )
    DeletedDate: Optional[datetime] = Field(
        None,
        description='A timestamp of when this authorization code was deleted. Read only.',
    )
    EffectiveDate: Optional[datetime] = Field(
        None,
        description='A date at which this code should begin being valid. Optional. Set on create only.',
    )
    ID: Optional[int] = Field(
        None, description='The identifier for the authorization code. Read only.'
    )
    IsDeleted: Optional[bool] = Field(
        None, description='Indicates whether this code is deleted.'
    )
    ValidationParameters: Optional[List[AuthorizationCodesSharedModelsParameter]] = (
        Field(
            None,
            description='The parameters and values used to validate this authorization code. May not be updated.',
        )
    )


class AuthorizationCodesSharedModelsAuthorizationCodeDefinition(BaseModel):
    AuthorizationID: Optional[str] = Field(
        None, description='The value used for securing codes generated.'
    )
    CreatedByUserID: Optional[int] = Field(
        None, description='The ID of the user that created this definition. Read only.'
    )
    CreatedDate: Optional[datetime] = Field(
        None, description='A timestamp of when this definition was created. Read only.'
    )
    DataFields: Optional[List[AuthorizationCodesSharedModelsDataField]] = Field(
        None,
        description='The defined fields to include in authorization codes generated from this definition. May not be updated.',
    )
    DeletedByUserID: Optional[int] = Field(
        None, description='The ID of the user that deleted this definition. Read only.'
    )
    DeletedDate: Optional[datetime] = Field(
        None, description='A timestamp of when this definition was deleted. Read only.'
    )
    Description: Optional[str] = Field(
        None, description='A description of this definition. May not be updated.'
    )
    DurationAccuracy: Optional[int] = Field(
        None,
        description='The number of bits used for timestamp verification. Defaults to 5. May not be updated.',
    )
    DurationAmount: Optional[int] = Field(
        None,
        description='The amount of duration for the specified duration unit used to calculate the Authorization Code. Defaults to 1. May not be updated.',
    )
    DurationUnits_1: Optional[DurationUnits] = Field(
        None,
        alias='DurationUnits',
        description="The units of duration used to calculate the Authorization Code. Defaults to 'Days'. May not be updated.",
    )
    HashLength: Optional[int] = Field(
        None,
        description='The bit length of the hash data which will be used for the authorization code. Defaults to 20. May not be updated.',
    )
    ID: Optional[str] = Field(
        None, description='The ID of the authorization code definition. Read only.'
    )
    IsDeleted: Optional[bool] = Field(
        None,
        description='Indicates whether this definition is enabled. True if generating codes is disabled.',
    )
    Name: str = Field(
        ...,
        description='The name of the authorization code definition. May not be updated.',
    )
    RandomLength: Optional[int] = Field(
        None,
        description='The bit length of random data which will be included in the authorization code.  This is necessary to allow creation of "identical" authorization codes containing the same timestamp. Defaults to 5. May not be updated.',
    )
    ValidationFields: Optional[List[AuthorizationCodesSharedModelsValidationField]] = (
        Field(
            None,
            description='The defined fields to verify when reading authorization codes generated from this definition. May not be updated.',
        )
    )


class BuildSystemSharedDTOActivityStep(BaseModel):
    ActivityID: Optional[int] = Field(
        None, description='The id of the activity this activity step belongs to'
    )
    ActivityStepID: Optional[int] = Field(
        None, description='The id of this activity step'
    )
    ImplementationID: Optional[str] = Field(
        None,
        description='The implementation id which is used to look up the step implementation',
    )
    ParameterMappings: Optional[List[BuildSystemSharedDTOParameterMapping]] = Field(
        None,
        description='The mapping of values from a source to be used for the step parameters',
    )
    RunOrder: Optional[int] = Field(
        None,
        description='The order of this activity step relative to other activity steps',
    )
    StepID: Optional[int] = Field(None, description='The id of the step')
    StepName: Optional[str] = Field(None, description='The name of the step')
    UseConfig: Optional[str] = Field(
        None,
        description='Indicates the configuration for the ActivityStep to use at runtime.  The build agent must provide this configuration',
    )


class BuildSystemSharedDTOAgent(BaseModel):
    AgentID: Optional[int] = Field(None, description='The id of the Agent')
    KeepAliveInterval: int = Field(
        ..., description="The 'Heartbeat Interval' used by the Build Agent."
    )
    MachineName: str = Field(
        ..., description='The machine name of the computer the agent is running on'
    )
    Status: BuildSystemSharedDTOAgentStatus
    StepConfigurations: Optional[List[BuildSystemSharedDTOStepConfiguration]] = Field(
        None, description="The agent's step configurations"
    )
    UserID: int = Field(..., description='The UserID of the Agent')


class BuildSystemSharedDTOJobActivity(BaseModel):
    ActivityID: Optional[int] = Field(
        None, description='The ID of the activity to be run as part of the job'
    )
    JobActivityID: Optional[int] = Field(
        None, description='The ID of this job activity'
    )
    JobID: Optional[int] = Field(
        None, description='The ID of the job this job activity belongs to'
    )
    ParameterMappings: Optional[List[BuildSystemSharedDTOParameterMapping]] = Field(
        None,
        description='The mapping of values from a source to be used for the activity parameters',
    )
    RunOrder: Optional[int] = Field(
        None, description='The order of this job activity relative to others in the job'
    )


class BuildSystemSharedInterfacesIActivityStep(BaseModel):
    ActivityID: Optional[int] = Field(None, description='ActivityID')
    ActivityStepID: Optional[int] = Field(None, description='ActivityStepID')
    ImplementationID: Optional[str] = Field(None, description='Implementation ID')
    ParameterMappings: Optional[List[BuildSystemSharedInterfacesIParameterMapping]] = (
        Field(None, description='ParameterMappings')
    )
    RunOrder: Optional[int] = Field(None, description='run order')
    StepID: Optional[int] = Field(None, description='step id')
    StepName: Optional[str] = Field(None, description='steo name')
    UseConfig: Optional[str] = Field(None, description='UseConfig')


class ContentSubmissionSharedBusinessEntitiesContentDefinition(BaseModel):
    Attributes: Optional[
        List[ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute]
    ] = Field(None, description='Attributes of this ContentDefinition')
    ContentDefinitionID: Optional[int] = Field(
        None, description='The ID of this content definition.'
    )
    Description: str = Field(
        ...,
        description='The description used on the package type in the AGCO Update System',
    )
    Name: Optional[str] = Field(
        None,
        description='The name of this content. Name must be valid for Attribute on PackageType.',
    )
    PackageTypeID: Optional[str] = Field(
        None, description='Read Only. The ID of the package type used for this content.'
    )
    TypeID: Optional[int] = Field(None, description='The type of content.')


class ContentSubmissionSharedBusinessEntitiesContentSubmission(BaseModel):
    Attributes: Optional[
        List[ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute]
    ] = Field(None, description='Attributes of this ContentSubmission')
    BuildID: Optional[int] = Field(
        None,
        description='ReadOnly. The ID of the Azure DevOps Build which will build the content package.',
    )
    ContentDefinitionID: Optional[int] = Field(
        None, description='The ID of the Content Definition.'
    )
    ContentSubmissionID: Optional[int] = Field(
        None, description='The ID of this Content Submission.'
    )
    Definition: Optional[ContentSubmissionSharedBusinessEntitiesContentDefinition] = (
        None
    )
    JobRunID: Optional[int] = Field(
        None,
        description='ReadOnly. The ID of the JobRun which will build the content package.',
    )
    PackageID: Optional[str] = Field(
        None, description='The ID of package generated by this content submission.'
    )
    ReleaseNotes: Optional[str] = Field(
        None, description='Release Notes for this ContentSubmission'
    )
    Repository: Optional[str] = Field(
        None,
        description='The SVN repository used as the source of this content submission',
    )
    Revision: Optional[int] = Field(
        None,
        description='The SVN revision used as the source of this content submission.',
    )
    SubmissionDate: Optional[datetime] = Field(
        None,
        description='Read Only. The UTC date and time the content submission was made.',
    )
    UserID: Optional[int] = Field(
        None, description='Read Only. The ID of the user who submitted the content'
    )
    Version: Optional[int] = Field(
        None,
        description='Optional.  The version number assigned to this Content Submission and the resulting Package.\r\n            If not provided, version shall be 1 if it is the first content submission for the \r\n            ContentDefinitionID otherwise it shall be the highest content submission version for the\r\n            specified ContentDefinitionID incremented by 1.',
    )


class GlobalResourcesSharedModelsGlobalImage(BaseModel):
    CRC: str = Field(..., description='The Hash of the file (SHA256, HEX-encoded).')
    Categories: Optional[List[GlobalResourcesSharedModelsGlobalImageCategory]] = Field(
        None, description='The category of the file.'
    )
    Date: Optional[datetime] = Field(None, description='The date of the file.')
    Description: str = Field(..., description='The description of the file.')
    Height: int = Field(..., description='The height of the file.')
    Id: Optional[str] = Field(None, description='The Id of the GlobalImage Metadata.')
    Name: str = Field(..., description='The name of the file when downloaded.')
    Publisher: Optional[str] = Field(None, description='The Publisher of the file.')
    Size: Optional[int] = Field(
        None,
        description="The size of the file in bytes. Null until assigned by server when marked as 'Available'. Read Only",
    )
    State: State2 = Field(
        ...,
        description="Indicates the state of this file. Must be 'Created' when created. Read Only.",
    )
    ThumbnailCRC: str = Field(
        ..., description='The Hash of the thumbnail file (SHA256, HEX-encoded).'
    )
    ThumbnailSize: Optional[int] = Field(
        None,
        description="The size of the thumbnail file in bytes. Null until assigned by server when marked as 'Available'. Read Only",
    )
    Width: int = Field(..., description='The width of the file.')


class GlobalResourcesSharedModelsStringDefinition(BaseModel):
    DescriptionForTranslator: str = Field(
        ..., description='The description of the string to be translated.'
    )
    DoNotTranslate: Optional[bool] = Field(
        None,
        description='True if the string should not be translated. False by default.',
    )
    Id: Optional[str] = Field(
        None, description='The identifier for the string. Read Only.'
    )
    ParameterCount: Optional[int] = Field(
        None, description='The number of parameters expected for the string.'
    )
    Timestamp: Optional[str] = Field(
        None,
        description='A value indicating the last modification of this string. Read Only.',
    )
    Translations: Optional[List[GlobalResourcesSharedModelsStringTranslation]] = Field(
        None, description='Translations for the string.'
    )


class GlobalResourcesSharedModelsTranslationSet(BaseModel):
    Attributes: Optional[List[GlobalResourcesSharedModelsTranslationSetAttribute]] = (
        Field(None, description='Attributes of the Translation Set')
    )
    FileIDs: List[str] = Field(
        ...,
        description='IDs for files related to this translation set. For example, the original and processed files',
    )
    Id: Optional[int] = Field(None, description='The id of the TranslationSet.')
    InDate: Optional[datetime] = Field(
        None, description='Read Only. The date the translation set was returned.'
    )
    Notes: Optional[str] = Field(None, description='Notes on the TranslationSet')
    OutDate: Optional[datetime] = Field(
        None, description='Read Only. The date the translation set was sent out.'
    )
    State: State6 = Field(
        ..., description='An enum indicating the state of the translation set'
    )
    TranslationRequestID: Optional[int] = Field(
        None,
        description='Read Only. The Id of the TranslationRequest which generated this translation set.',
    )


class UpdateSystemModelsAvailableSubscription(BaseModel):
    PackageType: Optional[UpdateSystemModelsPackageType] = None
    SubscriptionType_1: Optional[SubscriptionType] = Field(
        None,
        alias='SubscriptionType',
        description='The type of subscription supported.',
    )


class UpdateSystemModelsAvailableUpdateGroupSubscription(BaseModel):
    AvailableSubscriptions: Optional[List[UpdateSystemModelsAvailableSubscription]] = (
        Field(None, description='The available subscriptions for this update group.')
    )
    UpdateGroup: Optional[UpdateSystemModelsUpdateGroup] = None


class UpdateSystemModelsCheckinResult(BaseModel):
    Packages: Optional[List[UpdateSystemModelsPackage]] = Field(
        None, description='The packages for the client to run.'
    )
    RemovePackages: Optional[List[str]] = Field(
        None, description='The package ids for the client to remove.'
    )


class UpdateSystemModelsClientInfo(BaseModel):
    ClientID: Optional[str] = Field(None, description='The id of the client')
    Package: Optional[List[UpdateSystemModelsPackageReport]] = Field(
        None, description='The packages'
    )


class UpdateSystemModelsUpdateMetricsData(BaseModel):
    ActiveVersion: Optional[str] = Field(
        None, description='Active version (bundle number) of update type.'
    )
    ActiveVersionByClient: Optional[
        List[UpdateSystemModelsUpdateMetricsDataActiveVersionByClientRecord]
    ] = Field(
        None,
        description='Generic collection that is of type ActiveVersionByClientRecord',
    )
    CurrentStateByClient: Optional[
        List[UpdateSystemModelsUpdateMetricsDataCurrentStateByClientRecord]
    ] = Field(
        None,
        description='Generic collection that is of type CurrentStateByClientRecord',
    )
    CutOffDate: Optional[datetime] = Field(
        None,
        description='Date that has been configured to only show the most recent clients with a cut off date. (Ex. year from current date)',
    )
    DataRefreshed: Optional[datetime] = Field(
        None, description='Data was refreshed at this time.'
    )
    FilteredClientCount: Optional[int] = Field(
        None,
        description='Sum of clients represented\r\n            Filtered by updateType and lastCheckedInDate',
    )
    PackageErrors: Optional[
        List[UpdateSystemModelsUpdateMetricsDataPackageErrorsRecord]
    ] = Field(
        None, description='Generic collection that is of type PackageErrorsRecord'
    )
    TotalClientCount: Optional[int] = Field(
        None, description='Total clients we have ever serviced'
    )


class ApiV2StringDefinitionsBatchPostRequest(
    RootModel[List[GlobalResourcesSharedModelsStringDefinition]]
):
    root: List[GlobalResourcesSharedModelsStringDefinition]


class ApiV2StringDefinitionsBatchPutRequest(
    RootModel[List[GlobalResourcesSharedModelsStringDefinition]]
):
    root: List[GlobalResourcesSharedModelsStringDefinition]


class APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition(
    BaseModel
):
    Entities: Optional[
        List[AuthorizationCodesSharedModelsAuthorizationCodeDefinition]
    ] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode(BaseModel):
    Entities: Optional[List[AuthorizationCodesSharedModelsAuthorizationCode]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsGlobalImage(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsGlobalImage]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsStringDefinition(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsStringDefinition]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIIPagedResponseGlobalResourcesSharedModelsTranslationSet(BaseModel):
    Entities: Optional[List[GlobalResourcesSharedModelsTranslationSet]] = None
    Metadata: Optional[APIPagedResponseMetadata] = None


class APIPagedResponseBuildSystemSharedDTOAgent(BaseModel):
    Entities: List[BuildSystemSharedDTOAgent]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition(
    BaseModel
):
    Entities: List[ContentSubmissionSharedBusinessEntitiesContentDefinition]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission(
    BaseModel
):
    Entities: List[ContentSubmissionSharedBusinessEntitiesContentSubmission]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription(BaseModel):
    Entities: List[UpdateSystemModelsAvailableUpdateGroupSubscription]
    Metadata: APIPagedResponseMetadata


class BuildSystemSharedDTOActivity(BaseModel):
    ActivityID: Optional[int] = Field(None, description='The ID of the activity')
    Deleted: Optional[bool] = Field(None, description='')
    Name: Optional[str] = Field(None, description='The name of the activity')
    Parameters: Optional[List[BuildSystemSharedDTOParameter]] = Field(
        None, description='The parameters for this activity'
    )
    Steps: Optional[List[BuildSystemSharedDTOActivityStep]] = Field(
        None, description='The steps which are performed for this activity'
    )


class BuildSystemSharedDTOActivityRun(BaseModel):
    ActivityRunID: Optional[int] = Field(
        None, description='The identifier for the ActivityRun'
    )
    EndDate: Optional[datetime] = Field(
        None, description='Read Only. The UTC date and time when the activity completed'
    )
    JobActivityID: Optional[int] = Field(
        None,
        description='Read Only. The ID of the Job Activity that defines this activity run',
    )
    JobRunID: Optional[int] = Field(
        None,
        description='Read Only. The ID of the JobRun under which this ActivityRun is executing',
    )
    Parameters: Optional[List[BuildSystemSharedDTOParameterValue]] = Field(
        None,
        description='The parameters used for this run of the activity.  Parameters cannot be added or removed, but output parameter values may be updated.',
    )
    StartDate: Optional[datetime] = Field(
        None, description='Read Only. The UTC date and time when the activity started'
    )
    Status: BuildSystemSharedDTOActivityRunStatus
    Steps: Optional[List[BuildSystemSharedDTOActivityStep]] = Field(
        None,
        description='Read Only. The steps to be executed for the activity.  These steps come from the relationship through JobActivity down to ActivityStep',
    )


class BuildSystemSharedDTOJob(BaseModel):
    Activities: Optional[List[BuildSystemSharedDTOJobActivity]] = Field(
        None, description='The activities which are performed for the job'
    )
    Deleted: Optional[bool] = Field(
        None, description='Indicates if the job has been deleted.'
    )
    JobID: Optional[int] = Field(None, description='The ID of the job')
    Name: Optional[str] = Field(None, description='The name of the job')
    Parameters: Optional[List[BuildSystemSharedDTOParameter]] = Field(
        None, description='The parameters for the job'
    )


class BuildSystemSharedDTOJobRun(BaseModel):
    ActivityRuns: Optional[List[BuildSystemSharedDTOActivityRun]] = Field(
        None, description='The activity runs belonging to this JobRun'
    )
    EndDate: Optional[datetime] = Field(
        None, description='The UTC date and time when the job completed'
    )
    JobID: Optional[int] = Field(
        None, description='The ID of the job that defines the run'
    )
    JobRunID: Optional[int] = Field(None, description='The ID of this JobRun')
    Parameters: Optional[List[BuildSystemSharedDTOParameterValue]] = Field(
        None, description='The parameters used for this run of the job'
    )
    StartDate: Optional[datetime] = Field(
        None, description='The UTC date and time when the job started'
    )
    Status_1: Optional[Status] = Field(
        None, alias='Status', description='The status of this JobRun'
    )


class BuildSystemSharedInterfacesIActivityRun(BaseModel):
    ActivityRunID: Optional[int] = Field(None, description='ActivityRunID')
    EndDate: Optional[datetime] = Field(None, description='EndDate')
    JobActivityID: Optional[int] = Field(None, description='JobActivityID')
    JobRunID: Optional[int] = Field(None, description='JobRunID')
    Parameters: Optional[List[BuildSystemSharedInterfacesIParameterValue]] = Field(
        None, description='Parameters'
    )
    StartDate: Optional[datetime] = Field(None, description='StartDate')
    Status: Optional[BuildSystemSharedInterfacesIActivityRunStatus] = None
    Steps: Optional[List[BuildSystemSharedInterfacesIActivityStep]] = Field(
        None, description='Steps'
    )


class BuildSystemSharedInterfacesIJobRun(BaseModel):
    ActivityRuns: Optional[List[BuildSystemSharedInterfacesIActivityRun]] = Field(
        None, description='ActivityRuns'
    )
    EndDate: Optional[datetime] = Field(None, description='end date')
    JobID: Optional[int] = Field(None, description='job id')
    JobRunID: Optional[int] = Field(None, description='JobRunID')
    Parameters: Optional[List[BuildSystemSharedInterfacesIParameterValue]] = Field(
        None, description='Parameters'
    )
    StartDate: Optional[datetime] = Field(None, description='Start Date')
    Status_1: Optional[Status] = Field(None, alias='Status', description='status')


class APIPagedResponseBuildSystemSharedDTOActivityRun(BaseModel):
    Entities: List[BuildSystemSharedDTOActivityRun]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseBuildSystemSharedDTOActivity(BaseModel):
    Entities: List[BuildSystemSharedDTOActivity]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseBuildSystemSharedDTOJobRun(BaseModel):
    Entities: List[BuildSystemSharedDTOJobRun]
    Metadata: APIPagedResponseMetadata


class APIPagedResponseBuildSystemSharedDTOJob(BaseModel):
    Entities: List[BuildSystemSharedDTOJob]
    Metadata: APIPagedResponseMetadata
